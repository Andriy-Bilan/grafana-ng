export const PANEL_TOKEN = "panel";
export var ScaleType;
(function (ScaleType) {
    ScaleType["Linear"] = "linear";
    ScaleType["Log2"] = "log2";
    ScaleType["Log10"] = "log10";
    ScaleType["Log32"] = "log32";
    ScaleType["Log1024"] = "log1024";
})(ScaleType || (ScaleType = {}));
export class Threshold {
    constructor() {
        this.operator = ThresholdOperator.Gt;
        this.colorType = ThresholdColor.Critical;
        this.fill = true;
        this.line = true;
        this.axis = ThresholdAxis.Left;
    }
}
export var TooltipMode;
(function (TooltipMode) {
    TooltipMode["All"] = "all";
    TooltipMode["Single"] = "single";
})(TooltipMode || (TooltipMode = {}));
export var TooltipSortOrder;
(function (TooltipSortOrder) {
    TooltipSortOrder["None"] = "none";
    TooltipSortOrder["Increasing"] = "increasing";
    TooltipSortOrder["Decreasing"] = "decreasing";
})(TooltipSortOrder || (TooltipSortOrder = {}));
export var DataPointNullValueOption;
(function (DataPointNullValueOption) {
    DataPointNullValueOption["Connected"] = "connected";
    DataPointNullValueOption["Null"] = "null";
    DataPointNullValueOption["NullAsZero"] = "nullAsZero";
})(DataPointNullValueOption || (DataPointNullValueOption = {}));
export var ThresholdOperator;
(function (ThresholdOperator) {
    ThresholdOperator["Gt"] = "gt";
    ThresholdOperator["Lt"] = "lt";
})(ThresholdOperator || (ThresholdOperator = {}));
export var ThresholdColor;
(function (ThresholdColor) {
    ThresholdColor["Custom"] = "custom";
    ThresholdColor["Critical"] = "critical";
    ThresholdColor["Warning"] = "warning";
    ThresholdColor["Ok"] = "ok";
})(ThresholdColor || (ThresholdColor = {}));
export var ThresholdAxis;
(function (ThresholdAxis) {
    ThresholdAxis["Left"] = "left";
    ThresholdAxis["Right"] = "right";
})(ThresholdAxis || (ThresholdAxis = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQubS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2FwcC9wbHVnaW5zL3dpZGdldHMvY2hhcnQvc3JjL2NoYXJ0Lm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQztBQW9GbkMsTUFBTSxDQUFOLElBQVksU0FNWDtBQU5ELFdBQVksU0FBUztJQUNwQiw4QkFBaUIsQ0FBQTtJQUNqQiwwQkFBYSxDQUFBO0lBQ2IsNEJBQWUsQ0FBQTtJQUNmLDRCQUFlLENBQUE7SUFDZixnQ0FBbUIsQ0FBQTtBQUNwQixDQUFDLEVBTlcsU0FBUyxLQUFULFNBQVMsUUFNcEI7QUErQkQsTUFBTSxPQUFPLFNBQVM7SUFBdEI7UUFDQyxhQUFRLEdBQXNCLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUduRCxjQUFTLEdBQW1CLGNBQWMsQ0FBQyxRQUFRLENBQUM7UUFFcEQsU0FBSSxHQUFZLElBQUksQ0FBQztRQUNyQixTQUFJLEdBQVksSUFBSSxDQUFDO1FBSXJCLFNBQUksR0FBa0IsYUFBYSxDQUFDLElBQUksQ0FBQztJQUMxQyxDQUFDO0NBQUE7QUFFRCxNQUFNLENBQU4sSUFBWSxXQUdYO0FBSEQsV0FBWSxXQUFXO0lBQ3RCLDBCQUFXLENBQUE7SUFDWCxnQ0FBaUIsQ0FBQTtBQUNsQixDQUFDLEVBSFcsV0FBVyxLQUFYLFdBQVcsUUFHdEI7QUFFRCxNQUFNLENBQU4sSUFBWSxnQkFJWDtBQUpELFdBQVksZ0JBQWdCO0lBQzNCLGlDQUFhLENBQUE7SUFDYiw2Q0FBeUIsQ0FBQTtJQUN6Qiw2Q0FBeUIsQ0FBQTtBQUMxQixDQUFDLEVBSlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUkzQjtBQUVELE1BQU0sQ0FBTixJQUFZLHdCQUlYO0FBSkQsV0FBWSx3QkFBd0I7SUFDbkMsbURBQXVCLENBQUE7SUFDdkIseUNBQWEsQ0FBQTtJQUNiLHFEQUF5QixDQUFBO0FBQzFCLENBQUMsRUFKVyx3QkFBd0IsS0FBeEIsd0JBQXdCLFFBSW5DO0FBRUQsTUFBTSxDQUFOLElBQVksaUJBR1g7QUFIRCxXQUFZLGlCQUFpQjtJQUM1Qiw4QkFBUyxDQUFBO0lBQ1QsOEJBQVMsQ0FBQTtBQUNWLENBQUMsRUFIVyxpQkFBaUIsS0FBakIsaUJBQWlCLFFBRzVCO0FBRUQsTUFBTSxDQUFOLElBQVksY0FLWDtBQUxELFdBQVksY0FBYztJQUN6QixtQ0FBaUIsQ0FBQTtJQUNqQix1Q0FBcUIsQ0FBQTtJQUNyQixxQ0FBbUIsQ0FBQTtJQUNuQiwyQkFBUyxDQUFBO0FBQ1YsQ0FBQyxFQUxXLGNBQWMsS0FBZCxjQUFjLFFBS3pCO0FBRUQsTUFBTSxDQUFOLElBQVksYUFHWDtBQUhELFdBQVksYUFBYTtJQUN4Qiw4QkFBYSxDQUFBO0lBQ2IsZ0NBQWUsQ0FBQTtBQUNoQixDQUFDLEVBSFcsYUFBYSxLQUFiLGFBQWEsUUFHeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVSUNoYXJ0IH0gZnJvbSAncHJpbWVuZyc7XHJcbmltcG9ydCB7IENoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi9jaGFydC5jJztcclxuXHJcbmV4cG9ydCBjb25zdCBQQU5FTF9UT0tFTiA9IFwicGFuZWxcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnREYXRhe1xyXG5cdGRhdGFzZXRzOiBEYXRhU2V0W107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVNldHtcclxuXHRsYWJlbDogc3RyaW5nO1xyXG5cdGRhdGE6IERhdGFQb2ludFtdO1xyXG5cclxuXHRtaW4/OiBudW1iZXI7XHJcblx0bWF4PzogbnVtYmVyXHJcblx0YXZnPzogbnVtYmVyO1xyXG5cdGN1cnJlbnQ/OiBudW1iZXI7XHJcblxyXG5cdGFsbE51bGxzPzogYm9vbGVhbjtcclxuXHRhbGxaZXJvcz86IGJvb2xlYW47XHJcblxyXG5cdGluZGV4OiBudW1iZXI7XHJcblxyXG5cdC8vZGlzcGxheVxyXG5cdGZpbGw/OiBib29sZWFuO1xyXG5cdGJhY2tncm91bmRDb2xvcj86c3RyaW5nOyBcclxuXHRib3JkZXJDb2xvcj86IHN0cmluZztcclxuXHRib3JkZXJXaWR0aD86IG51bWJlcjtcclxuXHJcblx0cG9pbnRCb3JkZXJDb2xvcj86IHN0cmluZzsgXHJcblx0cG9pbnRCYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7IFxyXG5cdHBvaW50UmFkaXVzPzogbnVtYmVyOyBcclxuXHJcblx0c3RlcHBlZExpbmU/OiBib29sZWFuO1xyXG5cclxuXHRib3JkZXJEYXNoPzogbnVtYmVyW11cclxuXHJcblx0b3JkZXI/OiBudW1iZXI7XHJcblxyXG5cdGxlZ2VuZD86IGJvb2xlYW47XHJcblx0aGlkZGVuPzogYm9vbGVhbjtcclxuXHRzZWxlY3RlZD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVBvaW50e1xyXG5cdHg/OiBudW1iZXI7XHJcblx0eT86IG51bWJlcjtcclxuXHRpc051bGw6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUkdCe1xyXG5cdHI6IG51bWJlcjtcclxuXHRnOiBudW1iZXI7XHJcblx0YjogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoYXJ0e1xyXG5cdGxlZ2VuZDogTGVnZW5kO1xyXG5cdGF4ZXM6IEF4ZXM7XHJcblx0ZGlzcGxheTogRGlzcGxheTtcclxuXHJcblx0Y29tcG9uZW50OiBDaGFydENvbXBvbmVudDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMZWdlbmR7XHJcblx0c2hvdzogYm9vbGVhbjtcclxuXHR0YWJsZTogYm9vbGVhbjtcclxuXHRyaWdodDogYm9vbGVhbjtcclxuXHJcblx0bWluOiBudW1iZXI7XHJcblx0bWF4OiBudW1iZXI7XHJcblx0YXZnOiBudW1iZXI7XHJcblx0Y3VycmVudDogbnVtYmVyO1xyXG5cdHRvdGFsOiBudW1iZXI7XHJcblx0ZGVjaW1hbHM/IDogbnVtYmVyO1xyXG5cclxuXHRoaWRlT25seU51bGxzOiBib29sZWFuO1xyXG5cdGhpZGVPbmx5WmVyb2VzOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF4ZXN7XHJcblx0bGVmdFk6IEF4aXM7XHJcblx0cmlnaHRZPzogQXhpcztcclxuXHR4OiBhbnk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZW51bSBTY2FsZVR5cGUge1xyXG5cdExpbmVhciA9IFwibGluZWFyXCIsXHJcblx0TG9nMiA9IFwibG9nMlwiLFxyXG5cdExvZzEwID0gXCJsb2cxMFwiLFxyXG5cdExvZzMyID0gXCJsb2czMlwiLFxyXG5cdExvZzEwMjQgPSBcImxvZzEwMjRcIlxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF4aXN7XHJcblx0c2hvdzogYm9vbGVhbjtcclxuXHR1bml0OmFueTtcclxuXHRzY2FsZTogU2NhbGVUeXBlO1xyXG5cdG1pbj86IG51bWJlcjtcclxuXHRtYXg/OiBudW1iZXI7XHJcblx0ZGVjaW1hbHM/OiBudW1iZXI7XHJcblx0bGFiZWw/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGlzcGxheXtcclxuXHRzaG93TGluZXM6IGJvb2xlYW47XHJcblx0c2hvd1BvaW50czogYm9vbGVhbjtcclxuXHRzaG93QmFyczogYm9vbGVhbjtcclxuXHJcblx0ZmlsbDogbnVtYmVyO1xyXG5cdGxpbmVXaWR0aDogbnVtYmVyO1xyXG5cdHBvaW50UmFkaXVzOiBudW1iZXI7XHJcblxyXG5cdHN0YWlyY2FzZTogYm9vbGVhbjtcclxuXHR0b29sdGlwTW9kZTogVG9vbHRpcE1vZGU7XHJcblx0dG9vbHRpcFNvcnRPcmRlcjogVG9vbHRpcFNvcnRPcmRlcjtcclxuXHRcclxuXHRzdGFjazogYm9vbGVhbjtcclxuXHRudWxsVmFsdWU6IERhdGFQb2ludE51bGxWYWx1ZU9wdGlvbjtcclxuXHJcblx0dGhyZXNob2xkczogVGhyZXNob2xkW107XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUaHJlc2hvbGR7XHJcblx0b3BlcmF0b3I6IFRocmVzaG9sZE9wZXJhdG9yID0gVGhyZXNob2xkT3BlcmF0b3IuR3Q7XHJcblx0dmFsdWU/OiBudW1iZXI7XHJcblxyXG5cdGNvbG9yVHlwZTogVGhyZXNob2xkQ29sb3IgPSBUaHJlc2hvbGRDb2xvci5Dcml0aWNhbDtcclxuXHJcblx0ZmlsbDogYm9vbGVhbiA9IHRydWU7XHJcblx0bGluZTogYm9vbGVhbiA9IHRydWU7XHJcblx0ZmlsbENvbG9yOiBhbnk7XHJcblx0bGluZUNvbG9yOiBhbnk7XHJcblxyXG5cdGF4aXM6IFRocmVzaG9sZEF4aXMgPSBUaHJlc2hvbGRBeGlzLkxlZnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFRvb2x0aXBNb2RlIHtcclxuXHRBbGwgPSBcImFsbFwiLFxyXG5cdFNpbmdsZSA9IFwic2luZ2xlXCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVG9vbHRpcFNvcnRPcmRlciB7XHJcblx0Tm9uZSA9IFwibm9uZVwiLFxyXG5cdEluY3JlYXNpbmcgPSBcImluY3JlYXNpbmdcIixcclxuXHREZWNyZWFzaW5nID0gXCJkZWNyZWFzaW5nXCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRGF0YVBvaW50TnVsbFZhbHVlT3B0aW9uIHtcclxuXHRDb25uZWN0ZWQgPSBcImNvbm5lY3RlZFwiLFxyXG5cdE51bGwgPSBcIm51bGxcIixcclxuXHROdWxsQXNaZXJvID0gXCJudWxsQXNaZXJvXCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVGhyZXNob2xkT3BlcmF0b3Ige1xyXG5cdEd0ID0gXCJndFwiLFxyXG5cdEx0ID0gXCJsdFwiLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBUaHJlc2hvbGRDb2xvciB7XHJcblx0Q3VzdG9tID0gXCJjdXN0b21cIixcclxuXHRDcml0aWNhbCA9IFwiY3JpdGljYWxcIixcclxuXHRXYXJuaW5nID0gXCJ3YXJuaW5nXCIsXHJcblx0T2sgPSBcIm9rXCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVGhyZXNob2xkQXhpcyB7XHJcblx0TGVmdCA9IFwibGVmdFwiLFxyXG5cdFJpZ2h0ID0gXCJyaWdodFwiXHJcbn0iXX0=
export class ColorHelper {
    constructor() {
        this.palette = new Array();
        this.palette = [
            "7eb26d",
            "cca300",
            "6ed0e0",
            "EF843C",
            "E24D42",
            "1F78C1",
            "BA43A9",
            "705DA0",
            "508642",
            "CCA300",
            "447EBC",
            "C15C17",
            "890F02",
            "0A437C",
            "6D1F62",
            "584477",
            "B7DBAB",
            "F4D598",
            "70DBED",
            "F9BA8F",
            "F29191",
            "82B5D8",
            "E5A8E2",
            "AEA2E0",
            "629E51",
            "E5AC0E",
            "64B0C8",
            "E0752D",
            "BF1B00",
            "0A50A1",
            "962D82",
            "614D93",
            "9AC48A",
            "F2C96D",
            "65C5DB",
            "F9934E",
            "5195CE",
            "D683CE",
            "806EB7",
            "3F6833",
            "967302",
            "2F575E",
            "99440A",
            "58140C",
            "052B51",
            "511749",
            "3F2B5B",
            "E0F9D7",
            "FCEACA",
            "CFFAFF",
            "F9E2D2",
            "FCE2DE",
            "BADFF4",
            "F9D9F9",
            "DEDAF7",
            "EA6460"
        ];
    }
    getColor(ds) {
        const color = this.palette[ds.index % this.palette.length];
        return this.hexToRgb(color);
    }
    getColorAsArgbFunc(ds, opacity = 1) {
        const color = this.getColor(ds);
        return `rgba(${color.r},${color.g},${color.b}, ${opacity})`;
    }
    hexToRgb(hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }
    static parse(input) {
        var arr = [];
        if (input.substr(0, 1) == "#") {
            var collen = (input.length - 1) / 3;
            var fact = [17, 1, 0.062272][collen - 1];
            arr = [
                Math.round(parseInt(input.substr(1, collen), 16) * fact),
                Math.round(parseInt(input.substr(1 + collen, collen), 16) * fact),
                Math.round(parseInt(input.substr(1 + 2 * collen, collen), 16) * fact)
            ];
        }
        else {
            arr = input.split("(")[1].split(")")[0].split(",").map(Math.round);
        }
        return {
            r: arr[0],
            g: arr[1],
            b: arr[2]
        };
    }
    static rgbToHex(e) {
        const c = ColorHelper.parse(e);
        const r = c.r.toString(16).padStart(2, "0");
        const g = c.g.toString(16).padStart(2, "0");
        const b = c.b.toString(16).padStart(2, "0");
        return `#${r}${g}${b}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYXBwL3BsdWdpbnMvd2lkZ2V0cy9jaGFydC9zcmMvc2VydmljZXMvY29sb3ItaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxXQUFXO0lBSXZCO1FBRlEsWUFBTyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUE7UUFHcEMsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUVkLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1NBQ1IsQ0FBQTtJQUNGLENBQUM7SUFHTSxRQUFRLENBQUMsRUFBRTtRQUNqQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxL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QU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU1QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQ29sb3JIZWxwZXIge1xyXG5cclxuXHRwcml2YXRlIHBhbGV0dGUgPSBuZXcgQXJyYXk8c3RyaW5nPigpXHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5wYWxldHRlID0gW1xyXG5cdFx0XHRcclxuXHRcdFx0XCI3ZWIyNmRcIixcclxuXHRcdFx0XCJjY2EzMDBcIixcclxuXHRcdFx0XCI2ZWQwZTBcIixcclxuXHRcdFx0XCJFRjg0M0NcIixcclxuXHRcdFx0XCJFMjRENDJcIixcclxuXHRcdFx0XCIxRjc4QzFcIixcclxuXHRcdFx0XCJCQTQzQTlcIixcclxuXHRcdFx0XCI3MDVEQTBcIixcclxuXHRcdFx0XCI1MDg2NDJcIixcclxuXHRcdFx0XCJDQ0EzMDBcIixcclxuXHRcdFx0XCI0NDdFQkNcIixcclxuXHRcdFx0XCJDMTVDMTdcIixcclxuXHRcdFx0XCI4OTBGMDJcIixcclxuXHRcdFx0XCIwQTQzN0NcIixcclxuXHRcdFx0XCI2RDFGNjJcIixcclxuXHRcdFx0XCI1ODQ0NzdcIixcclxuXHRcdFx0XCJCN0RCQUJcIixcclxuXHRcdFx0XCJGNEQ1OThcIixcclxuXHRcdFx0XCI3MERCRURcIixcclxuXHRcdFx0XCJGOUJBOEZcIixcclxuXHRcdFx0XCJGMjkxOTFcIixcclxuXHRcdFx0XCI4MkI1RDhcIixcclxuXHRcdFx0XCJFNUE4RTJcIixcclxuXHRcdFx0XCJBRUEyRTBcIixcclxuXHRcdFx0XCI2MjlFNTFcIixcclxuXHRcdFx0XCJFNUFDMEVcIixcclxuXHRcdFx0XCI2NEIwQzhcIixcclxuXHRcdFx0XCJFMDc1MkRcIixcclxuXHRcdFx0XCJCRjFCMDBcIixcclxuXHRcdFx0XCIwQTUwQTFcIixcclxuXHRcdFx0XCI5NjJEODJcIixcclxuXHRcdFx0XCI2MTREOTNcIixcclxuXHRcdFx0XCI5QUM0OEFcIixcclxuXHRcdFx0XCJGMkM5NkRcIixcclxuXHRcdFx0XCI2NUM1REJcIixcclxuXHRcdFx0XCJGOTkzNEVcIixcclxuXHRcdFx0XCI1MTk1Q0VcIixcclxuXHRcdFx0XCJENjgzQ0VcIixcclxuXHRcdFx0XCI4MDZFQjdcIixcclxuXHRcdFx0XCIzRjY4MzNcIixcclxuXHRcdFx0XCI5NjczMDJcIixcclxuXHRcdFx0XCIyRjU3NUVcIixcclxuXHRcdFx0XCI5OTQ0MEFcIixcclxuXHRcdFx0XCI1ODE0MENcIixcclxuXHRcdFx0XCIwNTJCNTFcIixcclxuXHRcdFx0XCI1MTE3NDlcIixcclxuXHRcdFx0XCIzRjJCNUJcIixcclxuXHRcdFx0XCJFMEY5RDdcIixcclxuXHRcdFx0XCJGQ0VBQ0FcIixcclxuXHRcdFx0XCJDRkZBRkZcIixcclxuXHRcdFx0XCJGOUUyRDJcIixcclxuXHRcdFx0XCJGQ0UyREVcIixcclxuXHRcdFx0XCJCQURGRjRcIixcclxuXHRcdFx0XCJGOUQ5RjlcIixcclxuXHRcdFx0XCJERURBRjdcIixcclxuXHRcdFx0XCJFQTY0NjBcIlxyXG5cdFx0XVxyXG5cdH1cclxuXHRcclxuXHJcblx0cHVibGljIGdldENvbG9yKGRzKSB7XHJcblx0XHRjb25zdCBjb2xvciA9IHRoaXMucGFsZXR0ZVtkcy5pbmRleCAlIHRoaXMucGFsZXR0ZS5sZW5ndGhdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmhleFRvUmdiKGNvbG9yKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRDb2xvckFzQXJnYkZ1bmMoZHMsIG9wYWNpdHk6IG51bWJlciA9IDEpIHtcclxuXHRcdGNvbnN0IGNvbG9yID0gdGhpcy5nZXRDb2xvcihkcyk7XHJcblxyXG5cdFx0cmV0dXJuIGByZ2JhKCR7Y29sb3Iucn0sJHtjb2xvci5nfSwke2NvbG9yLmJ9LCAke29wYWNpdHl9KWBcclxuXHR9XHJcblxyXG5cclxuXHRwcml2YXRlIGhleFRvUmdiKGhleCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xyXG5cdFx0cmV0dXJuIHJlc3VsdCA/IHtcclxuXHRcdFx0cjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXHJcblx0XHRcdGc6IHBhcnNlSW50KHJlc3VsdFsyXSwgMTYpLFxyXG5cdFx0XHRiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KVxyXG5cdFx0fSA6IG51bGw7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIHBhcnNlKGlucHV0KSB7XHJcblx0XHR2YXIgYXJyID0gW107XHJcblxyXG5cdFx0aWYgKGlucHV0LnN1YnN0cigwLDEpPT1cIiNcIikge1xyXG5cdFx0XHR2YXIgY29sbGVuPShpbnB1dC5sZW5ndGgtMSkvMztcclxuXHRcdFx0dmFyIGZhY3Q9WzE3LDEsMC4wNjIyNzJdW2NvbGxlbi0xXTtcclxuXHRcdFx0YXJyID0gW1xyXG5cdFx0XHRcdFx0TWF0aC5yb3VuZChwYXJzZUludChpbnB1dC5zdWJzdHIoMSxjb2xsZW4pLDE2KSpmYWN0KSxcclxuXHRcdFx0XHRcdE1hdGgucm91bmQocGFyc2VJbnQoaW5wdXQuc3Vic3RyKDErY29sbGVuLGNvbGxlbiksMTYpKmZhY3QpLFxyXG5cdFx0XHRcdFx0TWF0aC5yb3VuZChwYXJzZUludChpbnB1dC5zdWJzdHIoMSsyKmNvbGxlbixjb2xsZW4pLDE2KSpmYWN0KVxyXG5cdFx0XHRdO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGFyciA9ICBpbnB1dC5zcGxpdChcIihcIilbMV0uc3BsaXQoXCIpXCIpWzBdLnNwbGl0KFwiLFwiKS5tYXAoTWF0aC5yb3VuZCk7XHJcblx0XHR9IFxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHI6IGFyclsgMCBdLFxyXG5cdFx0XHRnOiBhcnJbIDEgXSxcclxuXHRcdFx0YjogYXJyWyAyIF1cclxuXHRcdH1cclxuXHRcdFx0XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIHJnYlRvSGV4KGUpe1xyXG5cdFx0Y29uc3QgYyA9IENvbG9ySGVscGVyLnBhcnNlKCBlIClcclxuXHRcdGNvbnN0IHIgPSBjLnIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuXHRcdGNvbnN0IGcgPSBjLmcudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuXHRcdGNvbnN0IGIgPSBjLmIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuXHJcblx0XHRyZXR1cm4gYCMke3J9JHtnfSR7Yn1gO1xyXG5cdH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXX0=
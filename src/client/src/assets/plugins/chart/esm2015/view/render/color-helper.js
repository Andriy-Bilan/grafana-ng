export class ColorHelper {
    static getColor(ds) {
        const color = this.palette[ds.index % this.palette.length];
        return this.hexToRgb(color);
    }
    static getColorAsArgbFunc(ds, opacity = 1) {
        const color = this.getColor(ds);
        return `rgba(${color.r},${color.g},${color.b}, ${opacity})`;
    }
    static hexToRgb(hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }
    static parse(input) {
        var arr = [];
        if (input.substr(0, 1) == "#") {
            var collen = (input.length - 1) / 3;
            var fact = [17, 1, 0.062272][collen - 1];
            arr = [
                Math.round(parseInt(input.substr(1, collen), 16) * fact),
                Math.round(parseInt(input.substr(1 + collen, collen), 16) * fact),
                Math.round(parseInt(input.substr(1 + 2 * collen, collen), 16) * fact)
            ];
        }
        else {
            arr = input.split("(")[1].split(")")[0].split(",").map(Math.round);
        }
        return {
            r: arr[0],
            g: arr[1],
            b: arr[2]
        };
    }
    static rgbToHex(e) {
        const c = ColorHelper.parse(e);
        const r = c.r.toString(16).padStart(2, "0");
        const g = c.g.toString(16).padStart(2, "0");
        const b = c.b.toString(16).padStart(2, "0");
        return `#${r}${g}${b}`;
    }
}
ColorHelper.palette = [
    "7eb26d",
    "cca300",
    "6ed0e0",
    "EF843C",
    "E24D42",
    "1F78C1",
    "BA43A9",
    "705DA0",
    "508642",
    "CCA300",
    "447EBC",
    "C15C17",
    "890F02",
    "0A437C",
    "6D1F62",
    "584477",
    "B7DBAB",
    "F4D598",
    "70DBED",
    "F9BA8F",
    "F29191",
    "82B5D8",
    "E5A8E2",
    "AEA2E0",
    "629E51",
    "E5AC0E",
    "64B0C8",
    "E0752D",
    "BF1B00",
    "0A50A1",
    "962D82",
    "614D93",
    "9AC48A",
    "F2C96D",
    "65C5DB",
    "F9934E",
    "5195CE",
    "D683CE",
    "806EB7",
    "3F6833",
    "967302",
    "2F575E",
    "99440A",
    "58140C",
    "052B51",
    "511749",
    "3F2B5B",
    "E0F9D7",
    "FCEACA",
    "CFFAFF",
    "F9E2D2",
    "FCE2DE",
    "BADFF4",
    "F9D9F9",
    "DEDAF7",
    "EA6460"
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vYXBwL3BsdWdpbnMvd2lkZ2V0cy9jaGFydC9zcmMvdmlldy9yZW5kZXIvY29sb3ItaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxXQUFXO0lBOER2QixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQVc7UUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFM0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsRUFBVyxFQUFFLFVBQWtCLENBQUM7UUFDekQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVoQyxPQUFPLFFBQVEsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssT0FBTyxHQUFHLENBQUE7SUFDNUQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBVztRQUNsQyxJQUFJLE1BQU0sR0FBRywyQ0FBMkMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkUsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2YsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzFCLENBQUMsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMxQixDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDMUIsQ0FBQyxDQUFDLENBQUMs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LFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0NBQ1IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTZXQsIFJHQiB9IGZyb20gJy4uLy4uL2NoYXJ0Lm0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbG9ySGVscGVyIHtcclxuXHJcblx0cHJpdmF0ZSBzdGF0aWMgcGFsZXR0ZSA9IFtcclxuXHRcdFx0XHJcblx0XHRcIjdlYjI2ZFwiLFxyXG5cdFx0XCJjY2EzMDBcIixcclxuXHRcdFwiNmVkMGUwXCIsXHJcblx0XHRcIkVGODQzQ1wiLFxyXG5cdFx0XCJFMjRENDJcIixcclxuXHRcdFwiMUY3OEMxXCIsXHJcblx0XHRcIkJBNDNBOVwiLFxyXG5cdFx0XCI3MDVEQTBcIixcclxuXHRcdFwiNTA4NjQyXCIsXHJcblx0XHRcIkNDQTMwMFwiLFxyXG5cdFx0XCI0NDdFQkNcIixcclxuXHRcdFwiQzE1QzE3XCIsXHJcblx0XHRcIjg5MEYwMlwiLFxyXG5cdFx0XCIwQTQzN0NcIixcclxuXHRcdFwiNkQxRjYyXCIsXHJcblx0XHRcIjU4NDQ3N1wiLFxyXG5cdFx0XCJCN0RCQUJcIixcclxuXHRcdFwiRjRENTk4XCIsXHJcblx0XHRcIjcwREJFRFwiLFxyXG5cdFx0XCJGOUJBOEZcIixcclxuXHRcdFwiRjI5MTkxXCIsXHJcblx0XHRcIjgyQjVEOFwiLFxyXG5cdFx0XCJFNUE4RTJcIixcclxuXHRcdFwiQUVBMkUwXCIsXHJcblx0XHRcIjYyOUU1MVwiLFxyXG5cdFx0XCJFNUFDMEVcIixcclxuXHRcdFwiNjRCMEM4XCIsXHJcblx0XHRcIkUwNzUyRFwiLFxyXG5cdFx0XCJCRjFCMDBcIixcclxuXHRcdFwiMEE1MEExXCIsXHJcblx0XHRcIjk2MkQ4MlwiLFxyXG5cdFx0XCI2MTREOTNcIixcclxuXHRcdFwiOUFDNDhBXCIsXHJcblx0XHRcIkYyQzk2RFwiLFxyXG5cdFx0XCI2NUM1REJcIixcclxuXHRcdFwiRjk5MzRFXCIsXHJcblx0XHRcIjUxOTVDRVwiLFxyXG5cdFx0XCJENjgzQ0VcIixcclxuXHRcdFwiODA2RUI3XCIsXHJcblx0XHRcIjNGNjgzM1wiLFxyXG5cdFx0XCI5NjczMDJcIixcclxuXHRcdFwiMkY1NzVFXCIsXHJcblx0XHRcIjk5NDQwQVwiLFxyXG5cdFx0XCI1ODE0MENcIixcclxuXHRcdFwiMDUyQjUxXCIsXHJcblx0XHRcIjUxMTc0OVwiLFxyXG5cdFx0XCIzRjJCNUJcIixcclxuXHRcdFwiRTBGOUQ3XCIsXHJcblx0XHRcIkZDRUFDQVwiLFxyXG5cdFx0XCJDRkZBRkZcIixcclxuXHRcdFwiRjlFMkQyXCIsXHJcblx0XHRcIkZDRTJERVwiLFxyXG5cdFx0XCJCQURGRjRcIixcclxuXHRcdFwiRjlEOUY5XCIsXHJcblx0XHRcIkRFREFGN1wiLFxyXG5cdFx0XCJFQTY0NjBcIlxyXG5cdF1cclxuXHJcblx0c3RhdGljIGdldENvbG9yKGRzOiBEYXRhU2V0KSB7XHJcblx0XHRjb25zdCBjb2xvciA9IHRoaXMucGFsZXR0ZVtkcy5pbmRleCAlIHRoaXMucGFsZXR0ZS5sZW5ndGhdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmhleFRvUmdiKGNvbG9yKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRDb2xvckFzQXJnYkZ1bmMoZHM6IERhdGFTZXQsIG9wYWNpdHk6IG51bWJlciA9IDEpIHtcclxuXHRcdGNvbnN0IGNvbG9yID0gdGhpcy5nZXRDb2xvcihkcyk7XHJcblxyXG5cdFx0cmV0dXJuIGByZ2JhKCR7Y29sb3Iucn0sJHtjb2xvci5nfSwke2NvbG9yLmJ9LCAke29wYWNpdHl9KWBcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIGhleFRvUmdiKGhleDogc3RyaW5nKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XHJcblx0XHRyZXR1cm4gcmVzdWx0ID8ge1xyXG5cdFx0XHRyOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcclxuXHRcdFx0ZzogcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksXHJcblx0XHRcdGI6IHBhcnNlSW50KHJlc3VsdFszXSwgMTYpXHJcblx0XHR9IDogbnVsbDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBwYXJzZShpbnB1dDogYW55KTogUkdCIHtcclxuXHRcdHZhciBhcnIgPSBbXTtcclxuXHJcblx0XHRpZiAoaW5wdXQuc3Vic3RyKDAsMSk9PVwiI1wiKSB7XHJcblx0XHRcdHZhciBjb2xsZW49KGlucHV0Lmxlbmd0aC0xKS8zO1xyXG5cdFx0XHR2YXIgZmFjdD1bMTcsMSwwLjA2MjI3Ml1bY29sbGVuLTFdO1xyXG5cdFx0XHRhcnIgPSBbXHJcblx0XHRcdFx0XHRNYXRoLnJvdW5kKHBhcnNlSW50KGlucHV0LnN1YnN0cigxLGNvbGxlbiksMTYpKmZhY3QpLFxyXG5cdFx0XHRcdFx0TWF0aC5yb3VuZChwYXJzZUludChpbnB1dC5zdWJzdHIoMStjb2xsZW4sY29sbGVuKSwxNikqZmFjdCksXHJcblx0XHRcdFx0XHRNYXRoLnJvdW5kKHBhcnNlSW50KGlucHV0LnN1YnN0cigxKzIqY29sbGVuLGNvbGxlbiksMTYpKmZhY3QpXHJcblx0XHRcdF07XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0YXJyID0gIGlucHV0LnNwbGl0KFwiKFwiKVsxXS5zcGxpdChcIilcIilbMF0uc3BsaXQoXCIsXCIpLm1hcChNYXRoLnJvdW5kKTtcclxuXHRcdH0gXHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cjogYXJyWyAwIF0sXHJcblx0XHRcdGc6IGFyclsgMSBdLFxyXG5cdFx0XHRiOiBhcnJbIDIgXVxyXG5cdFx0fVxyXG5cdFx0XHRcclxuXHR9XHJcblxyXG5cdHN0YXRpYyByZ2JUb0hleCggZTpzdHJpbmcgKSA6IHN0cmluZ3tcclxuXHRcdGNvbnN0IGMgPSBDb2xvckhlbHBlci5wYXJzZSggZSApXHJcblx0XHRjb25zdCByID0gYy5yLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIik7XHJcblx0XHRjb25zdCBnID0gYy5nLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIik7XHJcblx0XHRjb25zdCBiID0gYy5iLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIik7XHJcblxyXG5cdFx0cmV0dXJuIGAjJHtyfSR7Z30ke2J9YDtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl19
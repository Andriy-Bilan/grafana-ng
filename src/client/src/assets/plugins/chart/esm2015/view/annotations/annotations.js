import { Component } from '@angular/core';
import { BaseChartComponent } from '../../base/chart-base';
import { AXIS_X, AXIS_Y_LEFT } from '../../chart.m';
import * as i0 from "@angular/core";
import * as i1 from "../../base/chart.store";
import * as i2 from "../../base/mouse.store";
import * as i3 from "common";
import * as i4 from "uilib";
import * as i5 from "@angular/common";
import * as i6 from "./add/add-annot";
function AnnotationDispatcherComponent_add_annotation_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "add-annotation", 3);
    i0.ɵɵlistener("close", function AnnotationDispatcherComponent_add_annotation_2_Template_add_annotation_close_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.showAddAnnot = false; });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("epochStart", ctx_r1.epochStart)("epochEnd", ctx_r1.epochEnd);
} }
export class AnnotationDispatcherComponent extends BaseChartComponent {
    constructor(store, mouse, time) {
        super(store);
        this.store = store;
        this.mouse = mouse;
        this.time = time;
        this.showAddAnnot = false;
        this.showEditAnnot = false;
        this.regionSubs = mouse
            .drag$
            .subscribe(x => this.region = x);
        this.mouseSubs = mouse
            .up$
            .subscribe(x => this.onMouseUp(x));
    }
    ngOnDestroy() {
        var _a, _b;
        super.ngOnDestroy();
        (_a = this.mouseSubs) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.regionSubs) === null || _b === void 0 ? void 0 : _b.unsubscribe();
    }
    onMouseUp(e) {
        var _a;
        if (!((e === null || e === void 0 ? void 0 : e.ctrlKey) && this.region)) {
            return;
        }
        const chart = this.component.control.chart;
        const scaleX = chart.scales[AXIS_X];
        const dr = this.region;
        const rangeStart = dr.start;
        const rangeEnd = (_a = dr.end) !== null && _a !== void 0 ? _a : dr.start;
        let start = Math.min(rangeStart.offsetX, rangeEnd.offsetX);
        let end = Math.max(rangeStart.offsetX, rangeEnd.offsetX);
        start = Math.max(start, scaleX.left);
        end = Math.min(end, scaleX.right);
        const es = scaleX
            .getValueForPixel(start)
            .valueOf();
        const ee = this.epochEnd = scaleX
            .getValueForPixel(end)
            .valueOf();
        console.log(es);
        this.epochStart = this.time.converter.toEpoch(es);
        this.epochEnd = this.time.converter.toEpoch(ee);
        this.offset = this.getPopupLocation(chart, e);
        setTimeout(() => this.showAddAnnot = true);
    }
    getPopupLocation(chart, e, xAdj = 0, yAdj = 0) {
        const scaleX = chart.scales[AXIS_Y_LEFT];
        var rect = chart.canvas.getBoundingClientRect();
        const maxY = scaleX.bottom;
        return {
            left: e.clientX - 200 + xAdj,
            top: maxY + rect.y + 5 + yAdj,
        };
    }
}
AnnotationDispatcherComponent.ɵfac = function AnnotationDispatcherComponent_Factory(t) { return new (t || AnnotationDispatcherComponent)(i0.ɵɵdirectiveInject(i1.ChartStore), i0.ɵɵdirectiveInject(i2.MouseStore), i0.ɵɵdirectiveInject(i3.TimeRangeStore)); };
AnnotationDispatcherComponent.ɵcmp = i0.ɵɵdefineComponent({ type: AnnotationDispatcherComponent, selectors: [["annotation-dispatcher"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 3, consts: [["shadow", "true", 1, "annot-popup", 3, "visible", "offset", "visibleChange"], ["popupAdd", ""], [3, "epochStart", "epochEnd", "close", 4, "ngIf"], [3, "epochStart", "epochEnd", "close"]], template: function AnnotationDispatcherComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "ed-popup", 0, 1);
        i0.ɵɵlistener("visibleChange", function AnnotationDispatcherComponent_Template_ed_popup_visibleChange_0_listener($event) { return ctx.showAddAnnot = $event; });
        i0.ɵɵtemplate(2, AnnotationDispatcherComponent_add_annotation_2_Template, 1, 2, "add-annotation", 2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("visible", ctx.showAddAnnot)("offset", ctx.offset);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.showAddAnnot);
    } }, directives: [i4.PopupComponent, i5.NgIf, i6.AddAnnotationComponent], encapsulation: 2 });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AnnotationDispatcherComponent, [{
        type: Component,
        args: [{
                selector: 'annotation-dispatcher',
                templateUrl: './annotations.html'
            }]
    }], function () { return [{ type: i1.ChartStore }, { type: i2.MouseStore }, { type: i3.TimeRangeStore }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,
import { AXIS_X, AXIS_Y_LEFT, AXIS_Y_RIGHT, ScaleType } from '../chart.m';
import { TooltipBuilder } from './drawers/tooltip';
import { AxisUnitHelper } from './helpers/unit-helper';
export class OptionsProvider {
    static getOptions(comp) {
        Chart.defaults.global.defaultFontColor = '#e3e3e3';
        Chart.defaults.global.defaultFontFamily = 'Roboto';
        Chart.defaults.global.defaultFontSize = 11;
        const w = comp.widget;
        return {
            maintainAspectRatio: false,
            animation: false,
            tooltips: TooltipBuilder.build(comp),
            legend: {
                display: false
            },
            spanGaps: true,
            scales: {
                xAxes: [this.getAxisX(w)],
                yAxes: [this.getAxisY(w, true), this.getAxisY(w, false)]
            },
        };
    }
    static getAxisX(w) {
        return {
            id: AXIS_X,
            type: 'time',
            gridLines: {
                color: 'rgba( 255,255,255, 0.1)',
            },
            ticks: {
                autoSkip: true,
                autoSkipPadding: 50,
                maxRotation: 0,
                minRotation: 0,
            },
            time: {
                displayFormats: {
                    second: 'HH:mm:ss',
                    minute: 'HH:mm',
                    hour: 'HH:mm',
                    day: 'M/D HH:mm',
                    week: 'M/D',
                    month: 'M/D',
                    year: 'YYYY-M',
                },
            },
            display: w.axes.x.show
        };
    }
    static getAxisY(w, left) {
        const wAxis = left ? w.axes.leftY : w.axes.rightY;
        const id = left ? AXIS_Y_LEFT : AXIS_Y_RIGHT;
        const axis = {
            id: id,
            display: wAxis.show,
            type: (!wAxis.scale || wAxis.scale == ScaleType.Linear) ? "linear" : "logarithmic",
            gridLines: {
                color: 'rgba( 255,255,255, 0.1)',
                zeroLineWidth: 3,
            },
            position: left ? "left" : "right",
            scaleLabel: {
                display: wAxis.label,
                labelString: wAxis.label,
            },
            ticks: {
                min: wAxis.min,
                max: wAxis.max,
                userCallback: (label, index, labels) => {
                    if (labels.length > 8 && !(index % 2)) {
                        return;
                    }
                    return AxisUnitHelper.getFormattedValue(label, wAxis.unit, wAxis.decimals);
                }
            },
            stacked: w.display.stack,
        };
        return axis;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2FwcC9wbHVnaW5zL3dpZGdldHMvY2hhcnQvc3JjL3ZpZXcvb3B0aW9ucy1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQVMsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFJdkQsTUFBTSxPQUFPLGVBQWU7SUFFM0IsTUFBTSxDQUFDLFVBQVUsQ0FBRSxJQUFvQjtRQUN0QyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDbkQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO1FBQ25ELEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFFM0MsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUV0QixPQUFPO1lBQ04sbUJBQW1CLEVBQUUsS0FBSztZQUMxQixTQUFTLEVBQUUsS0FBSztZQUVoQixRQUFRLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUU7WUFFdEMsTUFBTSxFQUFFO2dCQUNQLE9BQU8sRUFBRSxLQUFLO2FBQ2Q7WUFFRCxRQUFRLEVBQUUsSUFBSTtZQUVkLE1BQU0sRUFBRTtnQkFDUCxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUMsQ0FBRSxDQUFDO2dCQUMzQixLQUFLLEVBQUUsQ0FBRSxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUMsRUFBRSxLQUFLLENBQUUsQ0FBQzthQUM3RDtTQUNELENBQUM7SUFDSCxDQUFDO0lBRU8sTUFBTSxDQUFDLFFBQVEsQ0FBRSxDQUFRO1FBQ2hDLE9BQU87WUFDTixFQUFFLEVBQUUsTUFBTTtZQUNWLElBQUksRUFBRSxNQUFNO1lBQ1osU0FBUyxFQUFFO2dCQUNWLEtBQUssRUFBRSx5QkFBeUI7YUFDaEM7WUFDRCxLQUFLLEVBQUU7Z0JBQ04sUUFBUSxFQUFFLElBQUk7Z0JBQ2QsZUFBZSxFQUFFLEVBQUU7Z0JBQ25CLFdBQVcsRUFBRSxDQUFDO2dCQUNkLFdBQVcsRUFBRSxDQUFDO2FBRWQ7WUFDRCxJQUFJLEVBQUU7Z0JBQ0wsY0FBYyxFQUFFO29CQUNmLE1BQU0sRUFBRSxVQUFVO29CQUNsQixNQUFNLEVBQUUsT0FBTztvQkFDZixJQUFJLEVBQUUsT0FBTztvQkFDYixHQUFHLEVBQUUsV0FBVztvQkFDaEIsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsS0FBSyxFQUFFLEtBQUs7b0JBQ1osSUFBSSxFQUFFLFFBQVE7aUJBQ2I7YUFDRjtZQUNELE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJO1NBQ3RCLENBQUE7SUFDRixDQUFDO0lBRU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFRLEVBQUUsSUFBYTtRQUM5QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNsRCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBRTdDLE1BQU0sSUFBSSxHQUFHO1lBQ1osRUFBRSxFQUFFLEVBQUU7WUFDTixPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDbkIsSUFBSSxFQUFFLENBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGFBQWE7WUFDcEYsU0FBUyxFQUFFO2dCQUNWLEtBQUssRUFBRSx5QkFBeUI7Z0JBQ2hDLGFBQWEsRUFBRSxDQUFDO2FBQ2hCO1lBQ0QsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPO1lBQ2pDLFVBQVUsRUFBQztnQkFDVixPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUs7Z0JBQ3BCLFdBQVcsRUFBRSxLQUFLLENBQUMsS0FBSzthQUN4QjtZQUNELEtBQUssRUFBQztnQkFDTCxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7Z0JBQ2QsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO2dCQUNkLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7b0JBQ3RDLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFFLEtBQUssR0FBRyxDQUFDLENBQUUsRUFBRTt3QkFDeEMsT0FBTztxQkFDUDtvQkFFRCxPQUFPLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFFLENBQUM7Z0JBQzlFLENBQUM7YUFDRDtZQUNELE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUs7U0FDeEIsQ0FBQTtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jaGFydC5jJztcclxuaW1wb3J0IHsgQVhJU19YLCBBWElTX1lfTEVGVCwgQVhJU19ZX1JJR0hULCBDaGFydCwgU2NhbGVUeXBlIH0gZnJvbSAnLi4vY2hhcnQubSc7XHJcbmltcG9ydCB7IFRvb2x0aXBCdWlsZGVyIH0gZnJvbSAnLi9kcmF3ZXJzL3Rvb2x0aXAnO1xyXG5pbXBvcnQgeyBBeGlzVW5pdEhlbHBlciB9IGZyb20gJy4vaGVscGVycy91bml0LWhlbHBlcic7XHJcblxyXG5kZWNsYXJlIHZhciBDaGFydDogYW55O1xyXG5cclxuZXhwb3J0IGNsYXNzIE9wdGlvbnNQcm92aWRlcntcclxuXHJcblx0c3RhdGljIGdldE9wdGlvbnMoIGNvbXA6IENoYXJ0Q29tcG9uZW50ICl7XHJcblx0XHRDaGFydC5kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdEZvbnRDb2xvciA9ICcjZTNlM2UzJztcclxuXHRcdENoYXJ0LmRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udEZhbWlseSA9ICdSb2JvdG8nO1xyXG5cdFx0Q2hhcnQuZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSA9IDExO1xyXG5cclxuXHRcdGNvbnN0IHcgPSBjb21wLndpZGdldDtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcclxuXHRcdFx0YW5pbWF0aW9uOiBmYWxzZSxcclxuXHJcblx0XHRcdHRvb2x0aXBzOiBUb29sdGlwQnVpbGRlci5idWlsZCggY29tcCApLFxyXG5cclxuXHRcdFx0bGVnZW5kOiB7XHJcblx0XHRcdFx0ZGlzcGxheTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcclxuXHRcdFx0c3BhbkdhcHM6IHRydWUsXHJcblxyXG5cdFx0XHRzY2FsZXM6IHtcclxuXHRcdFx0XHR4QXhlczogW3RoaXMuZ2V0QXhpc1goIHcgKV0sXHJcblx0XHRcdFx0eUF4ZXM6IFsgdGhpcy5nZXRBeGlzWSggdywgdHJ1ZSApLCB0aGlzLmdldEF4aXNZKCB3LCBmYWxzZSApXSBcclxuXHRcdFx0fSxcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHN0YXRpYyBnZXRBeGlzWCggdzogQ2hhcnQgKXtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGlkOiBBWElTX1gsXHJcblx0XHRcdHR5cGU6ICd0aW1lJyxcclxuXHRcdFx0Z3JpZExpbmVzOiB7XHJcblx0XHRcdFx0Y29sb3I6ICdyZ2JhKCAyNTUsMjU1LDI1NSwgMC4xKScsXHJcblx0XHRcdH0sXHJcblx0XHRcdHRpY2tzOiB7XHJcblx0XHRcdFx0YXV0b1NraXA6IHRydWUsXHJcblx0XHRcdFx0YXV0b1NraXBQYWRkaW5nOiA1MCxcclxuXHRcdFx0XHRtYXhSb3RhdGlvbjogMCxcclxuXHRcdFx0XHRtaW5Sb3RhdGlvbjogMCxcclxuXHRcdFx0XHRcclxuXHRcdFx0fSxcclxuXHRcdFx0dGltZToge1xyXG5cdFx0XHRcdGRpc3BsYXlGb3JtYXRzOiB7XHJcblx0XHRcdFx0XHRzZWNvbmQ6ICdISDptbTpzcycsXHJcblx0XHRcdFx0XHRtaW51dGU6ICdISDptbScsXHJcblx0XHRcdFx0XHRob3VyOiAnSEg6bW0nLFxyXG5cdFx0XHRcdFx0ZGF5OiAnTS9EIEhIOm1tJyxcclxuXHRcdFx0XHRcdHdlZWs6ICdNL0QnLFxyXG5cdFx0XHRcdFx0bW9udGg6ICdNL0QnLFxyXG5cdFx0XHRcdFx0eWVhcjogJ1lZWVktTScsXHJcblx0XHRcdFx0IH0sXHJcblx0XHRcdH0sXHJcblx0XHRcdGRpc3BsYXk6IHcuYXhlcy54LnNob3dcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIGdldEF4aXNZKHc6IENoYXJ0LCBsZWZ0OiBib29sZWFuKXtcclxuXHRcdGNvbnN0IHdBeGlzID0gbGVmdCA/IHcuYXhlcy5sZWZ0WSA6IHcuYXhlcy5yaWdodFk7XHJcblx0XHRjb25zdCBpZCA9IGxlZnQgPyBBWElTX1lfTEVGVCA6IEFYSVNfWV9SSUdIVDtcclxuXHJcblx0XHRjb25zdCBheGlzID0ge1xyXG5cdFx0XHRpZDogaWQsXHJcblx0XHRcdGRpc3BsYXk6IHdBeGlzLnNob3csXHJcblx0XHRcdHR5cGU6ICggIXdBeGlzLnNjYWxlIHx8IHdBeGlzLnNjYWxlID09IFNjYWxlVHlwZS5MaW5lYXIgKSA/IFwibGluZWFyXCIgOiBcImxvZ2FyaXRobWljXCIsXHJcblx0XHRcdGdyaWRMaW5lczoge1xyXG5cdFx0XHRcdGNvbG9yOiAncmdiYSggMjU1LDI1NSwyNTUsIDAuMSknLFxyXG5cdFx0XHRcdHplcm9MaW5lV2lkdGg6IDMsXHJcblx0XHRcdH0sXHJcblx0XHRcdHBvc2l0aW9uOiBsZWZ0ID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsXHJcblx0XHRcdHNjYWxlTGFiZWw6e1xyXG5cdFx0XHRcdGRpc3BsYXk6IHdBeGlzLmxhYmVsLFxyXG5cdFx0XHRcdGxhYmVsU3RyaW5nOiB3QXhpcy5sYWJlbCxcclxuXHRcdFx0fSxcclxuXHRcdFx0dGlja3M6e1xyXG5cdFx0XHRcdG1pbjogd0F4aXMubWluLFxyXG5cdFx0XHRcdG1heDogd0F4aXMubWF4LFxyXG5cdFx0XHRcdHVzZXJDYWxsYmFjazogKGxhYmVsLCBpbmRleCwgbGFiZWxzKSA9PiB7XHJcblx0XHRcdFx0XHRpZiggbGFiZWxzLmxlbmd0aCA+IDggJiYgISggaW5kZXggJSAyICkgKXtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRyZXR1cm4gQXhpc1VuaXRIZWxwZXIuZ2V0Rm9ybWF0dGVkVmFsdWUoIGxhYmVsLCB3QXhpcy51bml0LCB3QXhpcy5kZWNpbWFscyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0c3RhY2tlZDogdy5kaXNwbGF5LnN0YWNrLFxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBheGlzO1xyXG5cdH1cclxufVxyXG4iXX0=
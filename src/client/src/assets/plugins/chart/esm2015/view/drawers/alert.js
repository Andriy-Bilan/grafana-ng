import { Injectable } from '@angular/core';
import { AlertEvalType } from 'common';
import { ColorHelper } from 'uilib';
import { BaseChartExtension } from '../../base/chart-base-extension';
import { AXIS_X, AXIS_Y_LEFT } from '../../chart.m';
import * as i0 from "@angular/core";
import * as i1 from "../../base/chart.store";
export class AlertDrawerPlugin extends BaseChartExtension {
    constructor(store) {
        super(store);
    }
    afterDatasetsDraw(chart, _) {
        var _a, _b;
        const conditions = (_b = (_a = this
            .widget) === null || _a === void 0 ? void 0 : _a.alert) === null || _b === void 0 ? void 0 : _b.conditions;
        if (conditions === null || conditions === void 0 ? void 0 : conditions.length) {
            new AlertDrawer(chart, conditions[0].evaluator).draw();
        }
    }
}
AlertDrawerPlugin.ɵfac = function AlertDrawerPlugin_Factory(t) { return new (t || AlertDrawerPlugin)(i0.ɵɵinject(i1.ChartStore)); };
AlertDrawerPlugin.ɵprov = i0.ɵɵdefineInjectable({ token: AlertDrawerPlugin, factory: AlertDrawerPlugin.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AlertDrawerPlugin, [{
        type: Injectable
    }], function () { return [{ type: i1.ChartStore }]; }, null); })();
class AlertDrawer {
    constructor(chart, evaluator) {
        this.chart = chart;
        this.evaluator = evaluator;
    }
    get context() {
        return this.chart.chart.ctx;
    }
    get scaleY() {
        return this.chart.scales[AXIS_Y_LEFT];
    }
    get scaleX() {
        return this.chart.scales[AXIS_X];
    }
    draw() {
        const offset1 = this.scaleY.getPixelForValue(+this.evaluator.params[0]);
        const offset2 = this.scaleY.getPixelForValue(+this.evaluator.params[1]);
        const topY = this.scaleY.getPixelForValue(this.scaleY.max);
        const bottomY = this.scaleY.getPixelForValue(this.scaleY.min);
        switch (+this.evaluator.type) {
            case AlertEvalType.IsAbove:
                if (!(topY > offset1 || bottomY < offset1)) {
                    this.renderLine(offset1);
                    this.renderRectangle(offset1, true);
                }
                break;
            case AlertEvalType.IsBelow:
                if (!(topY > offset1 || bottomY < offset1)) {
                    this.renderLine(offset1);
                    this.renderRectangle(offset1, false);
                }
                break;
            case AlertEvalType.IsWithinRange:
                if (!(topY > offset1 || bottomY < offset1 || topY > offset2 || bottomY < offset2)) {
                    this.renderLine(offset1);
                    this.renderLine(offset2);
                    this.renderRectangleBetween(offset1, offset2);
                }
                break;
            case AlertEvalType.IsOutsideRange:
                if (!(topY > offset1 || bottomY < offset1 || topY > offset2 || bottomY < offset2)) {
                    this.renderLine(offset1);
                    this.renderLine(offset2);
                    this.renderRectangle(offset1, false);
                    this.renderRectangle(offset2, true);
                }
                break;
        }
    }
    renderLine(offset) {
        this.context.beginPath();
        this.context.strokeStyle = AlertDrawer.LINE_COLOR;
        this.context.lineWidth = 2;
        this.context.moveTo(this.scaleX.left, offset);
        this.context.lineTo(this.scaleX.right, offset);
        this.context.stroke();
    }
    renderRectangle(offset, gt) {
        this.context.fillStyle = AlertDrawer.FILL_COLOR;
        const x = this.scaleX.left;
        const w = this.scaleX.width;
        const topY = this.scaleY.getPixelForValue(this.scaleY.max);
        const bottomY = this.scaleY.getPixelForValue(this.scaleY.min);
        const y = gt ? topY : Math.max(topY, offset);
        let h = gt ? offset - this.scaleY.top : this.scaleY.bottom - offset;
        h = Math.min(bottomY - topY, h);
        this.context.fillRect(x, y, w, h);
    }
    renderRectangleBetween(offset1, offset2) {
        this.context.fillStyle = AlertDrawer.FILL_COLOR;
        const x = this.scaleX.left;
        const w = this.scaleX.width;
        this.context.fillRect(x, offset1, w, offset2 - offset1);
    }
}
AlertDrawer.LINE_COLOR = ColorHelper.hexToRgbString(ColorHelper.ALERTING_COLOR, 0.6);
AlertDrawer.FILL_COLOR = ColorHelper.hexToRgbString(ColorHelper.ALERTING_COLOR, ColorHelper.REGION_FILL_ALPHA);
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { AlertEvalType } from 'common';
import { ColorHelper } from 'uilib';
import { BaseDrawer, ChartJsExtension } from '../../base/chart-base-extension';
import * as i0 from "@angular/core";
import * as i1 from "../../base/chart.store";
export class AlertDrawerPlugin extends ChartJsExtension {
    constructor(store) {
        super(store);
    }
    afterDatasetsDraw(chart, _) {
        var _a, _b;
        const conditions = (_b = (_a = this
            .widget) === null || _a === void 0 ? void 0 : _a.alert) === null || _b === void 0 ? void 0 : _b.conditions;
        if (conditions === null || conditions === void 0 ? void 0 : conditions.length) {
            new AlertDrawer(chart, conditions[0].evaluator).draw();
        }
    }
}
AlertDrawerPlugin.ɵfac = function AlertDrawerPlugin_Factory(t) { return new (t || AlertDrawerPlugin)(i0.ɵɵinject(i1.ChartStore)); };
AlertDrawerPlugin.ɵprov = i0.ɵɵdefineInjectable({ token: AlertDrawerPlugin, factory: AlertDrawerPlugin.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AlertDrawerPlugin, [{
        type: Injectable
    }], function () { return [{ type: i1.ChartStore }]; }, null); })();
class AlertDrawer extends BaseDrawer {
    constructor(chart, evaluator) {
        super(chart);
        this.evaluator = evaluator;
    }
    draw() {
        const offset1 = this.scaleY.getPixelForValue(+this.evaluator.params[0]);
        const offset2 = this.scaleY.getPixelForValue(+this.evaluator.params[1]);
        const topY = this.scaleY.getPixelForValue(this.scaleY.max);
        const bottomY = this.scaleY.getPixelForValue(this.scaleY.min);
        switch (+this.evaluator.type) {
            case AlertEvalType.IsAbove:
                if (!(topY > offset1 || bottomY < offset1)) {
                    this.renderLine(offset1);
                    this.renderRectangle(offset1, true);
                }
                break;
            case AlertEvalType.IsBelow:
                if (!(topY > offset1 || bottomY < offset1)) {
                    this.renderLine(offset1);
                    this.renderRectangle(offset1, false);
                }
                break;
            case AlertEvalType.IsWithinRange:
                if (!(topY > offset1 || bottomY < offset1 || topY > offset2 || bottomY < offset2)) {
                    this.renderLine(offset1);
                    this.renderLine(offset2);
                    this.renderRectangleBetween(offset1, offset2);
                }
                break;
            case AlertEvalType.IsOutsideRange:
                if (!(topY > offset1 || bottomY < offset1 || topY > offset2 || bottomY < offset2)) {
                    this.renderLine(offset1);
                    this.renderLine(offset2);
                    this.renderRectangle(offset1, false);
                    this.renderRectangle(offset2, true);
                }
                break;
        }
    }
    renderLine(offset) {
        this.context.beginPath();
        this.context.strokeStyle = AlertDrawer.LINE_COLOR;
        this.context.lineWidth = 2;
        this.context.moveTo(this.scaleX.left, offset);
        this.context.lineTo(this.scaleX.right, offset);
        this.context.stroke();
    }
    renderRectangle(offset, gt) {
        this.context.fillStyle = AlertDrawer.FILL_COLOR;
        const x = this.scaleX.left;
        const w = this.scaleX.width;
        const topY = this.scaleY.getPixelForValue(this.scaleY.max);
        const bottomY = this.scaleY.getPixelForValue(this.scaleY.min);
        const y = gt ? topY : Math.max(topY, offset);
        let h = gt ? offset - this.scaleY.top : this.scaleY.bottom - offset;
        h = Math.min(bottomY - topY, h);
        this.context.fillRect(x, y, w, h);
    }
    renderRectangleBetween(offset1, offset2) {
        this.context.fillStyle = AlertDrawer.FILL_COLOR;
        const x = this.scaleX.left;
        const w = this.scaleX.width;
        this.context.fillRect(x, offset1, w, offset2 - offset1);
    }
}
AlertDrawer.LINE_COLOR = ColorHelper.hexToRgbString(ColorHelper.ALERTING_COLOR, 0.6);
AlertDrawer.FILL_COLOR = ColorHelper.hexToRgbString(ColorHelper.ALERTING_COLOR, ColorHelper.REGION_FILL_ALPHA);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9hcHAvcGx1Z2lucy93aWRnZXRzL2NoYXJ0L3NyYy92aWV3L2RyYXdlcnMvYWxlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFrQixNQUFNLFFBQVEsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7O0FBSS9FLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxnQkFBZ0I7SUFFdEQsWUFBYSxLQUFpQjtRQUM3QixLQUFLLENBQUUsS0FBSyxDQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDOztRQUN6QixNQUFNLFVBQVUsZUFBRyxJQUFJO2FBQ3JCLE1BQU0sMENBQ0wsS0FBSywwQ0FDTCxVQUFVLENBQUM7UUFFZCxJQUFJLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxNQUFNLEVBQUU7WUFDdkIsSUFBSSxXQUFXLENBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBRSxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtTQUMxRDtJQUNGLENBQUM7O2tGQWZXLGlCQUFpQjt5REFBakIsaUJBQWlCLFdBQWpCLGlCQUFpQjtrREFBakIsaUJBQWlCO2NBRDdCLFVBQVU7O0FBbUJYLE1BQU0sV0FBWSxTQUFRLFVBQVU7SUFRbkMsWUFBYSxLQUFVLEVBQVUsU0FBeUI7UUFDekQsS0FBSyxDQUFFLEtBQUssQ0FBRSxDQUFDO1FBRGlCLGNBQVMsR0FBVCxTQUFTLENBQWdCO0lBRTFELENBQUM7SUFFRCxJQUFJO1FBQ0gsTUFBTSxPQUFPLEdBQUcsSUFB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QUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUMzQixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUU1QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxPQUFPLEdBQUcsT0FBTyxDQUFFLENBQUM7SUFDM0QsQ0FBQzs7QUFyRmUsc0JBQVUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUN0RCxXQUFXLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBRSxDQUFBO0FBRWxCLHNCQUFVLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FDdEQsV0FBVyxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsaUJBQWlCLENBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWxlcnRFdmFsVHlwZSwgQWxlcnRFdmFsdWF0b3IgfSBmcm9tICdjb21tb24nO1xyXG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJ3VpbGliJztcclxuaW1wb3J0IHsgQmFzZURyYXdlciwgQ2hhcnRKc0V4dGVuc2lvbiB9IGZyb20gJy4uLy4uL2Jhc2UvY2hhcnQtYmFzZS1leHRlbnNpb24nO1xyXG5pbXBvcnQgeyBDaGFydFN0b3JlIH0gZnJvbSAnLi4vLi4vYmFzZS9jaGFydC5zdG9yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBbGVydERyYXdlclBsdWdpbiBleHRlbmRzIENoYXJ0SnNFeHRlbnNpb24ge1xyXG5cclxuXHRjb25zdHJ1Y3Rvciggc3RvcmU6IENoYXJ0U3RvcmUgKXtcclxuXHRcdHN1cGVyKCBzdG9yZSApO1xyXG5cdH1cclxuXHJcblx0YWZ0ZXJEYXRhc2V0c0RyYXcoY2hhcnQsIF8pIHtcclxuXHRcdGNvbnN0IGNvbmRpdGlvbnMgPSB0aGlzXHJcblx0XHRcdC53aWRnZXRcclxuXHRcdFx0Py5hbGVydFxyXG5cdFx0XHQ/LmNvbmRpdGlvbnM7XHJcblxyXG5cdFx0aWYoIGNvbmRpdGlvbnM/Lmxlbmd0aCApe1xyXG5cdFx0XHRuZXcgQWxlcnREcmF3ZXIoIGNoYXJ0LCBjb25kaXRpb25zWyAwIF0uZXZhbHVhdG9yICkuZHJhdygpXHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBBbGVydERyYXdlciBleHRlbmRzIEJhc2VEcmF3ZXJ7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBMSU5FX0NPTE9SID0gQ29sb3JIZWxwZXIuaGV4VG9SZ2JTdHJpbmcoIFxyXG5cdFx0Q29sb3JIZWxwZXIuQUxFUlRJTkdfQ09MT1IsIDAuNiApXHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBGSUxMX0NPTE9SID0gQ29sb3JIZWxwZXIuaGV4VG9SZ2JTdHJpbmcoIFxyXG5cdFx0Q29sb3JIZWxwZXIuQUxFUlRJTkdfQ09MT1IsIENvbG9ySGVscGVyLlJFR0lPTl9GSUxMX0FMUEhBIClcclxuXHJcblx0Y29uc3RydWN0b3IoIGNoYXJ0OiBhbnksIHByaXZhdGUgZXZhbHVhdG9yOiBBbGVydEV2YWx1YXRvciApe1xyXG5cdFx0c3VwZXIoIGNoYXJ0ICk7XHJcblx0fVxyXG5cclxuXHRkcmF3KCl7XHJcblx0XHRjb25zdCBvZmZzZXQxID0gdGhpcy5zY2FsZVkuZ2V0UGl4ZWxGb3JWYWx1ZSgrdGhpcy5ldmFsdWF0b3IucGFyYW1zWyAwIF0pO1xyXG5cdFx0Y29uc3Qgb2Zmc2V0MiA9IHRoaXMuc2NhbGVZLmdldFBpeGVsRm9yVmFsdWUoK3RoaXMuZXZhbHVhdG9yLnBhcmFtc1sgMSBdKTtcclxuXHJcblx0XHRjb25zdCB0b3BZID0gdGhpcy5zY2FsZVkuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLnNjYWxlWS5tYXgpO1xyXG5cdFx0Y29uc3QgYm90dG9tWSA9IHRoaXMuc2NhbGVZLmdldFBpeGVsRm9yVmFsdWUodGhpcy5zY2FsZVkubWluKTtcclxuXHJcblx0XHRzd2l0Y2goICt0aGlzLmV2YWx1YXRvci50eXBlICl7XHJcblx0XHRcdGNhc2UgQWxlcnRFdmFsVHlwZS5Jc0Fib3ZlOlxyXG5cdFx0XHRcdGlmKCAhKCB0b3BZID4gb2Zmc2V0MSB8fCBib3R0b21ZIDwgb2Zmc2V0MSApICl7XHJcblx0XHRcdFx0XHR0aGlzLnJlbmRlckxpbmUoIG9mZnNldDEgKTtcclxuXHRcdFx0XHRcdHRoaXMucmVuZGVyUmVjdGFuZ2xlKCBvZmZzZXQxLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSBBbGVydEV2YWxUeXBlLklzQmVsb3c6XHJcblx0XHRcdFx0aWYoICEoIHRvcFkgPiBvZmZzZXQxIHx8IGJvdHRvbVkgPCBvZmZzZXQxICkgKXtcclxuXHRcdFx0XHRcdHRoaXMucmVuZGVyTGluZSggb2Zmc2V0MSApO1xyXG5cdFx0XHRcdFx0dGhpcy5yZW5kZXJSZWN0YW5nbGUoIG9mZnNldDEsIGZhbHNlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSBBbGVydEV2YWxUeXBlLklzV2l0aGluUmFuZ2U6XHJcblx0XHRcdFx0aWYoICEoIHRvcFkgPiBvZmZzZXQxIHx8IGJvdHRvbVkgPCBvZmZzZXQxIHx8IHRvcFkgPiBvZmZzZXQyIHx8IGJvdHRvbVkgPCBvZmZzZXQyICkgKXtcclxuXHRcdFx0XHRcdHRoaXMucmVuZGVyTGluZSggb2Zmc2V0MSApO1xyXG5cdFx0XHRcdFx0dGhpcy5yZW5kZXJMaW5lKCBvZmZzZXQyICk7XHJcblx0XHRcdFx0XHR0aGlzLnJlbmRlclJlY3RhbmdsZUJldHdlZW4oIG9mZnNldDEsIG9mZnNldDIgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgQWxlcnRFdmFsVHlwZS5Jc091dHNpZGVSYW5nZTpcclxuXHRcdFx0XHRcdGlmKCAhKCB0b3BZID4gb2Zmc2V0MSB8fCBib3R0b21ZIDwgb2Zmc2V0MSB8fCB0b3BZID4gb2Zmc2V0MiB8fCBib3R0b21ZIDwgb2Zmc2V0MiApICl7XHJcblx0XHRcdFx0XHRcdHRoaXMucmVuZGVyTGluZSggb2Zmc2V0MSApO1xyXG5cdFx0XHRcdFx0XHR0aGlzLnJlbmRlckxpbmUoIG9mZnNldDIgKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5yZW5kZXJSZWN0YW5nbGUoIG9mZnNldDEsIGZhbHNlICk7XHJcblx0XHRcdFx0XHRcdHRoaXMucmVuZGVyUmVjdGFuZ2xlKCBvZmZzZXQyLCB0cnVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcmVuZGVyTGluZSggb2Zmc2V0OiBudW1iZXIgKXtcclxuXHRcdHRoaXMuY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdFx0dGhpcy5jb250ZXh0LnN0cm9rZVN0eWxlID0gQWxlcnREcmF3ZXIuTElORV9DT0xPUjtcclxuXHRcdFxyXG5cdFx0dGhpcy5jb250ZXh0LmxpbmVXaWR0aCA9IDI7XHJcblx0XHR0aGlzLmNvbnRleHQubW92ZVRvKCB0aGlzLnNjYWxlWC5sZWZ0LCBvZmZzZXQpO1xyXG5cdFx0dGhpcy5jb250ZXh0LmxpbmVUbyggdGhpcy5zY2FsZVgucmlnaHQsIG9mZnNldCk7XHJcblx0XHR0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHJlbmRlclJlY3RhbmdsZSggb2Zmc2V0OiBudW1iZXIsIGd0OiBib29sZWFuICl7XHJcblx0XHR0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gQWxlcnREcmF3ZXIuRklMTF9DT0xPUiBcclxuXHJcblx0XHRjb25zdCB4ID0gdGhpcy5zY2FsZVgubGVmdDtcclxuXHRcdGNvbnN0IHcgPSB0aGlzLnNjYWxlWC53aWR0aDtcclxuXHJcblx0XHRjb25zdCB0b3BZID0gdGhpcy5zY2FsZVkuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLnNjYWxlWS5tYXgpO1xyXG5cdFx0Y29uc3QgYm90dG9tWSA9IHRoaXMuc2NhbGVZLmdldFBpeGVsRm9yVmFsdWUodGhpcy5zY2FsZVkubWluKTtcclxuXHJcblx0XHRjb25zdCB5ID0gZ3QgPyB0b3BZIDogTWF0aC5tYXgoIHRvcFksIG9mZnNldCApO1xyXG5cdFx0bGV0IGggPSBndCA/IG9mZnNldCAtIHRoaXMuc2NhbGVZLnRvcCA6IHRoaXMuc2NhbGVZLmJvdHRvbSAtIG9mZnNldDtcclxuXHJcblx0XHRoID0gTWF0aC5taW4oIGJvdHRvbVkgLSB0b3BZLCBoIClcclxuXHJcblx0XHR0aGlzLmNvbnRleHQuZmlsbFJlY3QoIHgsIHksIHcsIGggKTtcdFxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSByZW5kZXJSZWN0YW5nbGVCZXR3ZWVuKCBvZmZzZXQxLCBvZmZzZXQyICl7XHJcblx0XHR0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gQWxlcnREcmF3ZXIuRklMTF9DT0xPUjtcclxuXHJcblx0XHRjb25zdCB4ID0gdGhpcy5zY2FsZVgubGVmdDtcclxuXHRcdGNvbnN0IHcgPSB0aGlzLnNjYWxlWC53aWR0aDtcclxuXHJcblx0XHR0aGlzLmNvbnRleHQuZmlsbFJlY3QoIHgsIG9mZnNldDEsXHR3LCBvZmZzZXQyIC0gb2Zmc2V0MSApO1x0XHJcblx0fVxyXG59Il19
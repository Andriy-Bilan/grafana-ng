import { Injectable } from '@angular/core';
import { ChartJsExtension, BaseDrawer } from '../../base/chart-base-extension';
import * as i0 from "@angular/core";
import * as i1 from "../../base/chart.store";
export class DragRangeDrawerPlugin extends ChartJsExtension {
    constructor(store) {
        super(store);
        this.posSubs = store
            .mouse
            .drag$
            .subscribe(x => this.region = x);
    }
    finalize() {
        super.finalize();
        this.posSubs.unsubscribe();
    }
    afterDatasetsDraw(chart, _) {
        if (this.region && this.region.start && this.region.end) {
            new DragRangeDrawer(chart, this.region).draw();
        }
    }
}
DragRangeDrawerPlugin.ɵfac = function DragRangeDrawerPlugin_Factory(t) { return new (t || DragRangeDrawerPlugin)(i0.ɵɵinject(i1.ChartStore)); };
DragRangeDrawerPlugin.ɵprov = i0.ɵɵdefineInjectable({ token: DragRangeDrawerPlugin, factory: DragRangeDrawerPlugin.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DragRangeDrawerPlugin, [{
        type: Injectable
    }], function () { return [{ type: i1.ChartStore }]; }, null); })();
class DragRangeDrawer extends BaseDrawer {
    constructor(chart, region) {
        super(chart);
        this.region = region;
    }
    draw() {
        const os = Math.max(this.region.start.offsetX, this.scaleX.left);
        const oe = Math.max(this.scaleX.left, Math.min(this.region.end.offsetX, this.scaleX.right));
        this.renderRectangle(os, oe);
    }
    renderRectangle(offsetStart, offsetEnd) {
        const context = this.context;
        const color = "#ffffff";
        context.fillStyle = color + "22";
        context.strokeStyle = color + "30";
        const x = offsetStart;
        const w = offsetEnd - offsetStart;
        const y = this.minY;
        const h = this.maxY - this.minY;
        context.beginPath();
        context.setLineDash([]);
        context.fillRect(x, y, w, h);
        context.rect(x, y, w, h);
        context.stroke();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2FwcC9wbHVnaW5zL3dpZGdldHMvY2hhcnQvc3JjL3ZpZXcvZHJhd2Vycy9kcmFnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7QUFLL0UsTUFBTSxPQUFPLHFCQUF1QixTQUFRLGdCQUFnQjtJQUkzRCxZQUFhLEtBQWlCO1FBQzdCLEtBQUssQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSzthQUNsQixLQUFLO2FBQ0wsS0FBSzthQUNMLFNBQVMsQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELFFBQVE7UUFDUCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDekIsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ3hELElBQUksZUFBZSxDQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7U0FDaEQ7SUFDRixDQUFDOzswRkF0QlcscUJBQXFCOzZEQUFyQixxQkFBcUIsV0FBckIscUJBQXFCO2tEQUFyQixxQkFBcUI7Y0FEakMsVUFBVTs7QUEwQlgsTUFBTSxlQUFnQixTQUFRLFVBQVU7SUFFdkMsWUFBYSxLQUFVLEVBQVUsTUFBa0I7UUFDbEQsS0FBSyxDQUFFLEtBQUssQ0FBRSxDQUFDO1FBRGlCLFdBQU0sR0FBTixNQUFNLENBQVk7SUFHbkQsQ0FBQztJQUVELElBQUk7UUFDSCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxDQUFDO1FBRW5FLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQztRQUV6RCxJQUFJLENBQUMsZUFBZSxDQUFFLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRU8sZUFBZSxDQUFFLFdBQW1CLEVBQUUsU0FBaUI7UUFDOUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM3QixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUM7UUFFeEIsT0FBTyxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2hDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQztRQUVuQyxNQUFNLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDdEIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQztRQUVsQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUVoQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDcEIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN2QixPQUFPLENBQUMsUUFBUSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7UUFDM0IsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUM7Q0E4Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDaGFydEpzRXh0ZW5zaW9uLCBCYXNlRHJhd2VyIH0gZnJvbSAnLi4vLi4vYmFzZS9jaGFydC1iYXNlLWV4dGVuc2lvbic7XHJcbmltcG9ydCB7IENoYXJ0U3RvcmUgfSBmcm9tICcuLi8uLi9iYXNlL2NoYXJ0LnN0b3JlJztcclxuaW1wb3J0IHsgRHJhZ1JlZ2lvbiB9IGZyb20gJy4uLy4uL2Jhc2UvbW91c2Uuc3RvcmUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRHJhZ1JhbmdlRHJhd2VyUGx1Z2luICBleHRlbmRzIENoYXJ0SnNFeHRlbnNpb24ge1xyXG5cdHJlZ2lvbjogRHJhZ1JlZ2lvbjtcclxuXHRwb3NTdWJzOiBTdWJzY3JpcHRpb247XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBzdG9yZTogQ2hhcnRTdG9yZSApe1xyXG5cdFx0c3VwZXIoIHN0b3JlICk7XHJcblxyXG5cdFx0dGhpcy5wb3NTdWJzID0gc3RvcmVcclxuXHRcdFx0Lm1vdXNlXHJcblx0XHRcdC5kcmFnJFxyXG5cdFx0XHQuc3Vic2NyaWJlKCB4ID0+IHRoaXMucmVnaW9uID0geCApO1xyXG5cdH1cclxuXHJcblx0ZmluYWxpemUoKXtcclxuXHRcdHN1cGVyLmZpbmFsaXplKCk7XHJcblx0XHR0aGlzLnBvc1N1YnMudW5zdWJzY3JpYmUoKTtcclxuXHR9XHJcblxyXG5cdGFmdGVyRGF0YXNldHNEcmF3KGNoYXJ0LCBfKSB7XHJcblx0XHRpZiggdGhpcy5yZWdpb24gJiYgdGhpcy5yZWdpb24uc3RhcnQgJiYgdGhpcy5yZWdpb24uZW5kICl7XHJcblx0XHRcdG5ldyBEcmFnUmFuZ2VEcmF3ZXIoIGNoYXJ0LCB0aGlzLnJlZ2lvbiApLmRyYXcoKVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgRHJhZ1JhbmdlRHJhd2VyIGV4dGVuZHMgQmFzZURyYXdlcntcclxuXHJcblx0Y29uc3RydWN0b3IoIGNoYXJ0OiBhbnksIHByaXZhdGUgcmVnaW9uOiBEcmFnUmVnaW9uICl7XHJcblx0XHRzdXBlciggY2hhcnQgKTtcclxuXHRcclxuXHR9XHJcblxyXG5cdGRyYXcoKSB7XHJcblx0XHRjb25zdCBvcyA9IE1hdGgubWF4KCB0aGlzLnJlZ2lvbi5zdGFydC5vZmZzZXRYLCB0aGlzLnNjYWxlWC5sZWZ0ICk7XHJcblx0XHRcclxuXHRcdGNvbnN0IG9lID0gTWF0aC5tYXgoIHRoaXMuc2NhbGVYLmxlZnQsXHJcblx0XHRcdE1hdGgubWluKCB0aGlzLnJlZ2lvbi5lbmQub2Zmc2V0WCwgdGhpcy5zY2FsZVgucmlnaHQgKSk7XHJcblxyXG5cdFx0dGhpcy5yZW5kZXJSZWN0YW5nbGUoIG9zLCBvZSApO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSByZW5kZXJSZWN0YW5nbGUoIG9mZnNldFN0YXJ0OiBudW1iZXIsIG9mZnNldEVuZDogbnVtYmVyICl7XHJcblx0XHRjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG5cdFx0Y29uc3QgY29sb3IgPSBcIiNmZmZmZmZcIjtcclxuXHRcdFxyXG5cdFx0Y29udGV4dC5maWxsU3R5bGUgPSBjb2xvciArIFwiMjJcIlxyXG5cdFx0Y29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yICsgXCIzMFwiO1xyXG5cclxuXHRcdGNvbnN0IHggPSBvZmZzZXRTdGFydDtcclxuXHRcdGNvbnN0IHcgPSBvZmZzZXRFbmQgLSBvZmZzZXRTdGFydDtcclxuXHJcblx0XHRjb25zdCB5ID0gdGhpcy5taW5ZO1xyXG5cdFx0Y29uc3QgaCA9IHRoaXMubWF4WSAtIHRoaXMubWluWTtcclxuXHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lRGFzaChbXSlcclxuXHRcdGNvbnRleHQuZmlsbFJlY3QoIHgsIHksXHR3LCBoICk7XHRcclxuXHRcdGNvbnRleHQucmVjdCggeCwgeSxcdHcsIGggKTtcclxuXHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0fVxyXG5cclxuXHQvLyBwdWJsaWMgc3RhdGljIHpvb21JbiggY2hhcnQsIHRpbWVNYW5hZ2VyIDogVGltZU1hbmFnZXIgICl7XHJcblx0Ly8gXHRjb25zdCBzY2FsZVggPSBjaGFydC5zY2FsZXNbJ3gtYXhpcy0wJ107XHJcblxyXG5cdC8vIFx0Y29uc3Qgc3ggPSBjaGFydC5kcmFnUmVnaW9uLnN0YXJ0Lm9mZnNldFg7XHJcblx0Ly8gXHRjb25zdCBleCA9IGNoYXJ0LmRyYWdSZWdpb24uZW5kLm9mZnNldFg7XHJcblxyXG5cdC8vIFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1pbiggc3gsIGV4ICk7XHJcblx0Ly8gXHRjb25zdCBlbmQgPSBNYXRoLm1heCggc3gsIGV4ICk7XHJcblxyXG5cdC8vIFx0Y29uc3Qgb3MgPSBNYXRoLm1heCggc3RhcnQsIHNjYWxlWC5sZWZ0ICk7XHJcblx0Ly8gXHRjb25zdCBvZSA9IE1hdGgubWF4KCBzY2FsZVgubGVmdCxcdE1hdGgubWluKCBlbmQsIHNjYWxlWC5yaWdodCApKTtcclxuXHJcblx0Ly8gXHRpZiggTWF0aC5hYnMoIG9zIC0gb2UgKSA9PSAwICl7XHJcblx0Ly8gXHRcdHJldHVybjtcclxuXHQvLyBcdH1cclxuXHJcblx0Ly8gXHR2YXIgZnJvbSA9IHNjYWxlWC5nZXRWYWx1ZUZvclBpeGVsKCBvcyApO1xyXG5cdC8vIFx0dmFyIHRvID0gc2NhbGVYLmdldFZhbHVlRm9yUGl4ZWwoIG9lICk7XHJcblxyXG5cdC8vIFx0Y29uc3QgbWluc0RpZmYgPSBNYXRoLmFicyggZnJvbS5kaWZmKCB0bywgXCJtaW51dGVzXCIgKSApO1xyXG5cclxuXHQvLyBcdGlmKCBtaW5zRGlmZiA8IDEgKXtcclxuXHQvLyBcdFx0cmV0dXJuO1xyXG5cdC8vIFx0fVxyXG5cdFx0XHJcblx0Ly8gXHR0aW1lTWFuYWdlci5kcmFnKCBmcm9tLCB0bywgMCApO1xyXG5cdC8vIH1cclxuXHJcblx0Ly8gcHVibGljIHN0YXRpYyB6b29tT3V0KCB0aW1lTWFuYWdlciA6IFRpbWVNYW5hZ2VyKXtcclxuXHQvLyBcdGNvbnN0IHJhbmdlID0gdGltZU1hbmFnZXIuZ2V0UmFuZ2UoKTtcclxuXHRcdFxyXG5cdC8vIFx0Y29uc3QgZiA9IDxhbnk+cmFuZ2UuZnJvbTtcclxuICAvLyAgIGNvbnN0IHQgPSA8YW55PnJhbmdlLnRvO1xyXG5cclxuICAvLyAgIGNvbnN0IHRpbWVzcGFuID0gdC52YWx1ZU9mKCkgLSBmLnZhbHVlT2YoKTtcclxuICAvLyAgIGNvbnN0IGNlbnRlciA9IHQudmFsdWVPZigpIC0gdGltZXNwYW4gLyAyO1xyXG5cclxuICAvLyAgIGNvbnN0IGZhY3RvciA9IDI7XHJcbiAgXHJcbiAgLy8gICBjb25zdCB0byA9IGNlbnRlciArICh0aW1lc3BhbiAqIGZhY3RvcikgLyAyO1xyXG5cdC8vIFx0Y29uc3QgZnJvbSA9IGNlbnRlciAtICh0aW1lc3BhbiAqIGZhY3RvcikgLyAyO1xyXG5cdFx0XHJcblx0Ly8gXHR0aW1lTWFuYWdlci5kcmFnKCBtb21lbnQoIGZyb20gKSwgbW9tZW50KCB0byApLCAwICk7XHJcblx0Ly8gfVxyXG59XHJcbiJdfQ==
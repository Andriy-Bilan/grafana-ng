import { Injectable } from '@angular/core';
import { BaseChartExtension, BaseDrawer } from '../../base/chart-base-extension';
import * as i0 from "@angular/core";
import * as i1 from "../../base/chart.store";
export class DragRangeDrawerPlugin extends BaseChartExtension {
    constructor(store) {
        super(store);
        this.posSubs = store
            .mouse
            .drag$
            .subscribe(x => this.region = x);
    }
    finalize() {
        super.finalize();
        this.posSubs.unsubscribe();
    }
    afterDatasetsDraw(chart, _) {
        if (this.region && this.region.start && this.region.end) {
            new DragRangeDrawer(chart, this.region).draw();
        }
    }
}
DragRangeDrawerPlugin.ɵfac = function DragRangeDrawerPlugin_Factory(t) { return new (t || DragRangeDrawerPlugin)(i0.ɵɵinject(i1.ChartStore)); };
DragRangeDrawerPlugin.ɵprov = i0.ɵɵdefineInjectable({ token: DragRangeDrawerPlugin, factory: DragRangeDrawerPlugin.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DragRangeDrawerPlugin, [{
        type: Injectable
    }], function () { return [{ type: i1.ChartStore }]; }, null); })();
class DragRangeDrawer extends BaseDrawer {
    constructor(chart, region) {
        super(chart);
        this.region = region;
    }
    draw() {
        const os = Math.max(this.region.start.offsetX, this.scaleX.left);
        const oe = Math.max(this.scaleX.left, Math.min(this.region.end.offsetX, this.scaleX.right));
        this.renderRectangle(os, oe);
    }
    renderRectangle(offsetStart, offsetEnd) {
        const context = this.context;
        const color = "#ffffff";
        context.fillStyle = color + "22";
        context.strokeStyle = color + "30";
        const x = offsetStart;
        const w = offsetEnd - offsetStart;
        const y = this.minY;
        const h = this.maxY - this.minY;
        context.beginPath();
        context.setLineDash([]);
        context.fillRect(x, y, w, h);
        context.rect(x, y, w, h);
        context.stroke();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2FwcC9wbHVnaW5zL3dpZGdldHMvY2hhcnQvc3JjL3ZpZXcvZHJhd2Vycy9kcmFnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7QUFLakYsTUFBTSxPQUFPLHFCQUF1QixTQUFRLGtCQUFrQjtJQUk3RCxZQUFhLEtBQWlCO1FBQzdCLEtBQUssQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSzthQUNsQixLQUFLO2FBQ0wsS0FBSzthQUNMLFNBQVMsQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELFFBQVE7UUFDUCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDekIsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ3hELElBQUksZUFBZSxDQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7U0FDaEQ7SUFDRixDQUFDOzswRkF0QlcscUJBQXFCOzZEQUFyQixxQkFBcUIsV0FBckIscUJBQXFCO2tEQUFyQixxQkFBcUI7Y0FEakMsVUFBVTs7QUEwQlgsTUFBTSxlQUFnQixTQUFRLFVBQVU7SUFFdkMsWUFBYSxLQUFVLEVBQVUsTUFBa0I7UUFDbEQsS0FBSyxDQUFFLEtBQUssQ0FBRSxDQUFDO1FBRGlCLFdBQU0sR0FBTixNQUFNLENBQVk7SUFHbkQsQ0FBQztJQUVELElBQUk7UUFDSCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxDQUFDO1FBRW5FLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQztRQUV6RCxJQUFJLENBQUMsZUFBZSxDQUFFLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRU8sZUFBZSxDQUFFLFdBQW1CLEVBQUUsU0FBaUI7UUFDOUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM3QixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUM7UUFFeEIsT0FBTyxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2hDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQztRQUVuQyxNQUFNLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDdEIsTUFBTSxDQUFDLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQztRQUVsQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUVoQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDcEIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN2QixPQUFPLENBQUMsUUFBUSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7UUFDM0IsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUM7Q0E4Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBCYXNlQ2hhcnRFeHRlbnNpb24sIEJhc2VEcmF3ZXIgfSBmcm9tICcuLi8uLi9iYXNlL2NoYXJ0LWJhc2UtZXh0ZW5zaW9uJztcclxuaW1wb3J0IHsgQ2hhcnRTdG9yZSB9IGZyb20gJy4uLy4uL2Jhc2UvY2hhcnQuc3RvcmUnO1xyXG5pbXBvcnQgeyBEcmFnUmVnaW9uIH0gZnJvbSAnLi4vLi4vYmFzZS9tb3VzZS5zdG9yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEcmFnUmFuZ2VEcmF3ZXJQbHVnaW4gIGV4dGVuZHMgQmFzZUNoYXJ0RXh0ZW5zaW9uIHtcclxuXHRyZWdpb246IERyYWdSZWdpb247XHJcblx0cG9zU3ViczogU3Vic2NyaXB0aW9uO1xyXG5cclxuXHRjb25zdHJ1Y3Rvciggc3RvcmU6IENoYXJ0U3RvcmUgKXtcclxuXHRcdHN1cGVyKCBzdG9yZSApO1xyXG5cclxuXHRcdHRoaXMucG9zU3VicyA9IHN0b3JlXHJcblx0XHRcdC5tb3VzZVxyXG5cdFx0XHQuZHJhZyRcclxuXHRcdFx0LnN1YnNjcmliZSggeCA9PiB0aGlzLnJlZ2lvbiA9IHggKTtcclxuXHR9XHJcblxyXG5cdGZpbmFsaXplKCl7XHJcblx0XHRzdXBlci5maW5hbGl6ZSgpO1xyXG5cdFx0dGhpcy5wb3NTdWJzLnVuc3Vic2NyaWJlKCk7XHJcblx0fVxyXG5cclxuXHRhZnRlckRhdGFzZXRzRHJhdyhjaGFydCwgXykge1xyXG5cdFx0aWYoIHRoaXMucmVnaW9uICYmIHRoaXMucmVnaW9uLnN0YXJ0ICYmIHRoaXMucmVnaW9uLmVuZCApe1xyXG5cdFx0XHRuZXcgRHJhZ1JhbmdlRHJhd2VyKCBjaGFydCwgdGhpcy5yZWdpb24gKS5kcmF3KClcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIERyYWdSYW5nZURyYXdlciBleHRlbmRzIEJhc2VEcmF3ZXJ7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCBjaGFydDogYW55LCBwcml2YXRlIHJlZ2lvbjogRHJhZ1JlZ2lvbiApe1xyXG5cdFx0c3VwZXIoIGNoYXJ0ICk7XHJcblx0XHJcblx0fVxyXG5cclxuXHRkcmF3KCkge1xyXG5cdFx0Y29uc3Qgb3MgPSBNYXRoLm1heCggdGhpcy5yZWdpb24uc3RhcnQub2Zmc2V0WCwgdGhpcy5zY2FsZVgubGVmdCApO1xyXG5cdFx0XHJcblx0XHRjb25zdCBvZSA9IE1hdGgubWF4KCB0aGlzLnNjYWxlWC5sZWZ0LFxyXG5cdFx0XHRNYXRoLm1pbiggdGhpcy5yZWdpb24uZW5kLm9mZnNldFgsIHRoaXMuc2NhbGVYLnJpZ2h0ICkpO1xyXG5cclxuXHRcdHRoaXMucmVuZGVyUmVjdGFuZ2xlKCBvcywgb2UgKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcmVuZGVyUmVjdGFuZ2xlKCBvZmZzZXRTdGFydDogbnVtYmVyLCBvZmZzZXRFbmQ6IG51bWJlciApe1xyXG5cdFx0Y29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dDtcclxuXHRcdGNvbnN0IGNvbG9yID0gXCIjZmZmZmZmXCI7XHJcblx0XHRcclxuXHRcdGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3IgKyBcIjIyXCJcclxuXHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBjb2xvciArIFwiMzBcIjtcclxuXHJcblx0XHRjb25zdCB4ID0gb2Zmc2V0U3RhcnQ7XHJcblx0XHRjb25zdCB3ID0gb2Zmc2V0RW5kIC0gb2Zmc2V0U3RhcnQ7XHJcblxyXG5cdFx0Y29uc3QgeSA9IHRoaXMubWluWTtcclxuXHRcdGNvbnN0IGggPSB0aGlzLm1heFkgLSB0aGlzLm1pblk7XHJcblxyXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZURhc2goW10pXHJcblx0XHRjb250ZXh0LmZpbGxSZWN0KCB4LCB5LFx0dywgaCApO1x0XHJcblx0XHRjb250ZXh0LnJlY3QoIHgsIHksXHR3LCBoICk7XHJcblx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cdH1cclxuXHJcblx0Ly8gcHVibGljIHN0YXRpYyB6b29tSW4oIGNoYXJ0LCB0aW1lTWFuYWdlciA6IFRpbWVNYW5hZ2VyICApe1xyXG5cdC8vIFx0Y29uc3Qgc2NhbGVYID0gY2hhcnQuc2NhbGVzWyd4LWF4aXMtMCddO1xyXG5cclxuXHQvLyBcdGNvbnN0IHN4ID0gY2hhcnQuZHJhZ1JlZ2lvbi5zdGFydC5vZmZzZXRYO1xyXG5cdC8vIFx0Y29uc3QgZXggPSBjaGFydC5kcmFnUmVnaW9uLmVuZC5vZmZzZXRYO1xyXG5cclxuXHQvLyBcdGNvbnN0IHN0YXJ0ID0gTWF0aC5taW4oIHN4LCBleCApO1xyXG5cdC8vIFx0Y29uc3QgZW5kID0gTWF0aC5tYXgoIHN4LCBleCApO1xyXG5cclxuXHQvLyBcdGNvbnN0IG9zID0gTWF0aC5tYXgoIHN0YXJ0LCBzY2FsZVgubGVmdCApO1xyXG5cdC8vIFx0Y29uc3Qgb2UgPSBNYXRoLm1heCggc2NhbGVYLmxlZnQsXHRNYXRoLm1pbiggZW5kLCBzY2FsZVgucmlnaHQgKSk7XHJcblxyXG5cdC8vIFx0aWYoIE1hdGguYWJzKCBvcyAtIG9lICkgPT0gMCApe1xyXG5cdC8vIFx0XHRyZXR1cm47XHJcblx0Ly8gXHR9XHJcblxyXG5cdC8vIFx0dmFyIGZyb20gPSBzY2FsZVguZ2V0VmFsdWVGb3JQaXhlbCggb3MgKTtcclxuXHQvLyBcdHZhciB0byA9IHNjYWxlWC5nZXRWYWx1ZUZvclBpeGVsKCBvZSApO1xyXG5cclxuXHQvLyBcdGNvbnN0IG1pbnNEaWZmID0gTWF0aC5hYnMoIGZyb20uZGlmZiggdG8sIFwibWludXRlc1wiICkgKTtcclxuXHJcblx0Ly8gXHRpZiggbWluc0RpZmYgPCAxICl7XHJcblx0Ly8gXHRcdHJldHVybjtcclxuXHQvLyBcdH1cclxuXHRcdFxyXG5cdC8vIFx0dGltZU1hbmFnZXIuZHJhZyggZnJvbSwgdG8sIDAgKTtcclxuXHQvLyB9XHJcblxyXG5cdC8vIHB1YmxpYyBzdGF0aWMgem9vbU91dCggdGltZU1hbmFnZXIgOiBUaW1lTWFuYWdlcil7XHJcblx0Ly8gXHRjb25zdCByYW5nZSA9IHRpbWVNYW5hZ2VyLmdldFJhbmdlKCk7XHJcblx0XHRcclxuXHQvLyBcdGNvbnN0IGYgPSA8YW55PnJhbmdlLmZyb207XHJcbiAgLy8gICBjb25zdCB0ID0gPGFueT5yYW5nZS50bztcclxuXHJcbiAgLy8gICBjb25zdCB0aW1lc3BhbiA9IHQudmFsdWVPZigpIC0gZi52YWx1ZU9mKCk7XHJcbiAgLy8gICBjb25zdCBjZW50ZXIgPSB0LnZhbHVlT2YoKSAtIHRpbWVzcGFuIC8gMjtcclxuXHJcbiAgLy8gICBjb25zdCBmYWN0b3IgPSAyO1xyXG4gIFxyXG4gIC8vICAgY29uc3QgdG8gPSBjZW50ZXIgKyAodGltZXNwYW4gKiBmYWN0b3IpIC8gMjtcclxuXHQvLyBcdGNvbnN0IGZyb20gPSBjZW50ZXIgLSAodGltZXNwYW4gKiBmYWN0b3IpIC8gMjtcclxuXHRcdFxyXG5cdC8vIFx0dGltZU1hbmFnZXIuZHJhZyggbW9tZW50KCBmcm9tICksIG1vbWVudCggdG8gKSwgMCApO1xyXG5cdC8vIH1cclxufVxyXG4iXX0=
import { Inject, Injectable } from '@angular/core';
import { PANEL_TOKEN } from 'common';
import { BehaviorSubject } from 'rxjs';
import { AXIS_X } from '../chart.m';
import * as i0 from "@angular/core";
import * as i1 from "common";
export class MouseStore {
    constructor(panel, time) {
        this.panel = panel;
        this.time = time;
        this._down = new BehaviorSubject(null);
        this.down$ = this._down.asObservable();
        this._up = new BehaviorSubject(null);
        this.up$ = this._up.asObservable();
        this.drag = new BehaviorSubject(null);
        this.drag$ = this.drag.asObservable();
        this.hover = new BehaviorSubject(null);
        this.hover$ = this.hover.asObservable();
    }
    get component() {
        var _a;
        return (_a = this
            .panel
            .widget) === null || _a === void 0 ? void 0 : _a.component;
    }
    get chart() {
        return this
            .component
            .control
            .chart;
    }
    down(s) {
        this.drag.next({
            start: s,
            end: s /*!? */
        });
        this._down.next(s);
        s.target.setPointerCapture(1);
    }
    up(e) {
        e.target.releasePointerCapture(1);
        this._up.next(e);
        if (!e.ctrlKey) {
            this.zoomIn();
        }
        this.drag.next(undefined);
        this.refresh();
    }
    move(m) {
        this.hover.next(m);
        const d = this.drag.value;
        if (!d) {
            return;
        }
        this.drag.next({
            start: d.start,
            end: m
        });
    }
    leave(e) {
        this.hover.next(undefined);
        this.refresh();
    }
    refresh() {
        this.component.control.refresh();
    }
    zoomIn() {
        const scaleX = this.chart.scales[AXIS_X];
        if (!this.drag.value.end) {
            return;
        }
        const sx = this.drag.value.start.offsetX;
        const ex = this.drag.value.end.offsetX;
        const start = Math.min(sx, ex);
        const end = Math.max(sx, ex);
        const os = Math.max(start, scaleX.left);
        const oe = Math.max(scaleX.left, Math.min(end, scaleX.right));
        if (Math.abs(os - oe) == 0) {
            return;
        }
        const from = scaleX.getValueForPixel(os);
        const to = scaleX.getValueForPixel(oe);
        const minsDiff = Math.abs(from.diff(to, "minutes"));
        if (minsDiff >= 1) {
            this.time.zoom({ from, to });
        }
    }
}
MouseStore.ɵfac = function MouseStore_Factory(t) { return new (t || MouseStore)(i0.ɵɵinject(PANEL_TOKEN), i0.ɵɵinject(i1.TimeRangeStore)); };
MouseStore.ɵprov = i0.ɵɵdefineInjectable({ token: MouseStore, factory: MouseStore.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(MouseStore, [{
        type: Injectable
    }], function () { return [{ type: i1.Panel, decorators: [{
                type: Inject,
                args: [PANEL_TOKEN]
            }] }, { type: i1.TimeRangeStore }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW91c2Uuc3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9hcHAvcGx1Z2lucy93aWRnZXRzL2NoYXJ0L3NyYy9iYXNlL21vdXNlLnN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBUyxXQUFXLEVBQWtCLE1BQU0sUUFBUSxDQUFDO0FBQzVELE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQzs7O0FBUXBDLE1BQU0sT0FBTyxVQUFVO0lBNEJ0QixZQUMrQixLQUFZLEVBQ2xDLElBQW9CO1FBREUsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUNsQyxTQUFJLEdBQUosSUFBSSxDQUFnQjtRQTVCckIsVUFBSyxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RCxVQUFLLEdBQTJCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFM0QsUUFBRyxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RCxRQUFHLEdBQTJCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdkQsU0FBSSxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3RCxVQUFLLEdBQTJCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFMUQsVUFBSyxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RCxXQUFNLEdBQTJCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFvQnBFLENBQUM7SUFsQkQsSUFBSSxTQUFTOztRQUNaLGFBQU8sSUFBSTthQUNULEtBQUs7YUFDTCxNQUFNLDBDQUNM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QyxnQkFBZ0IsQ0FBRSxFQUFFLENBQUUsQ0FBQztRQUMzQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUUsRUFBRSxDQUFFLENBQUM7UUFFekMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFFLEVBQUUsRUFBRSxTQUFTLENBQUUsQ0FBRSxDQUFDO1FBRXhELElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUMsQ0FBRSxDQUFBO1NBQzdCO0lBQ0YsQ0FBQzs7b0VBaEhXLFVBQVUsY0E2QlosV0FBVztrREE3QlQsVUFBVSxXQUFWLFVBQVU7a0RBQVYsVUFBVTtjQUR0QixVQUFVOztzQkE4QlIsTUFBTTt1QkFBRSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYW5lbCwgUEFORUxfVE9LRU4sIFRpbWVSYW5nZVN0b3JlIH0gZnJvbSAnY29tbW9uJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQVhJU19YIH0gZnJvbSAnLi4vY2hhcnQubSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJhZ1JlZ2lvbntcblx0c3RhcnQ6IE1vdXNlRXZlbnQ7XG5cdGVuZDogTW91c2VFdmVudDtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1vdXNlU3RvcmUge1xuXG5cdHByaXZhdGUgX2Rvd246IEJlaGF2aW9yU3ViamVjdDxNb3VzZUV2ZW50PiA9IG5ldyBCZWhhdmlvclN1YmplY3QobnVsbCk7XG5cdHJlYWRvbmx5IGRvd24kOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdGhpcy5fZG93bi5hc09ic2VydmFibGUoKTtcblxuXHRwcml2YXRlIF91cDogQmVoYXZpb3JTdWJqZWN0PE1vdXNlRXZlbnQ+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcblx0cmVhZG9ubHkgdXAkOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdGhpcy5fdXAuYXNPYnNlcnZhYmxlKCk7XG5cblx0cHJpdmF0ZSBkcmFnOiBCZWhhdmlvclN1YmplY3Q8RHJhZ1JlZ2lvbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpO1xuXHRyZWFkb25seSBkcmFnJDogT2JzZXJ2YWJsZTxEcmFnUmVnaW9uPiA9IHRoaXMuZHJhZy5hc09ic2VydmFibGUoKTtcblxuXHRwcml2YXRlIGhvdmVyOiBCZWhhdmlvclN1YmplY3Q8TW91c2VFdmVudD4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpO1xuXHRyZWFkb25seSBob3ZlciQ6IE9ic2VydmFibGU8TW91c2VFdmVudD4gPSB0aGlzLmhvdmVyLmFzT2JzZXJ2YWJsZSgpO1xuXG5cdGdldCBjb21wb25lbnQoKXtcblx0XHRyZXR1cm4gdGhpc1xuXHRcdFx0LnBhbmVsXG5cdFx0XHQud2lkZ2V0XG5cdFx0XHQ/LmNvbXBvbmVudDtcblx0fVxuXG5cdGdldCBjaGFydCgpe1xuXHRcdHJldHVybiB0aGlzXG5cdFx0XHQuY29tcG9uZW50XG5cdFx0XHQuY29udHJvbFxuXHRcdFx0LmNoYXJ0O1xuXHR9XG5cblx0Y29uc3RydWN0b3IoIFxuXHRcdEBJbmplY3QoIFBBTkVMX1RPS0VOICkgcHVibGljIHBhbmVsOiBQYW5lbCxcblx0XHRwcml2YXRlIHRpbWU6IFRpbWVSYW5nZVN0b3JlICl7XG5cdFx0XG5cdH1cblxuXHRkb3duKCBzOiBNb3VzZUV2ZW50ICkgIHtcblx0XHR0aGlzLmRyYWcubmV4dCgge1xuXHRcdFx0c3RhcnQ6IHMsXG5cdFx0XHRlbmQ6IHMvKiE/ICovXG5cdFx0fSApO1xuXG5cdFx0dGhpcy5fZG93bi5uZXh0KCBzICk7XG5cblx0XHQoPGFueT5zLnRhcmdldCkuc2V0UG9pbnRlckNhcHR1cmUoIDEgKTtcblx0fVxuXG5cdHVwKCBlOiBNb3VzZUV2ZW50ICl7XG5cdFx0KDxhbnk+ZS50YXJnZXQpLnJlbGVhc2VQb2ludGVyQ2FwdHVyZSggMSApO1xuXG5cdFx0dGhpcy5fdXAubmV4dCggZSApO1xuXG5cdFx0aWYoICFlLmN0cmxLZXkgKXtcblx0XHRcdHRoaXMuem9vbUluKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kcmFnLm5leHQoIHVuZGVmaW5lZCApO1xuXG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cdH1cblxuXHRtb3ZlKCBtOiBNb3VzZUV2ZW50ICl7XG5cdFx0dGhpcy5ob3Zlci5uZXh0KCBtICk7XG5cblx0XHRjb25zdCBkID0gdGhpcy5kcmFnLnZhbHVlO1xuXG5cdFx0aWYoICFkICl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5kcmFnLm5leHQoIHtcblx0XHRcdHN0YXJ0OiBkLnN0YXJ0LFxuXHRcdFx0ZW5kOiBtXG5cdFx0fSApXG5cdH1cblxuXHRsZWF2ZSggZTogTW91c2VFdmVudCApe1xuXHRcdHRoaXMuaG92ZXIubmV4dCggdW5kZWZpbmVkICk7XG5cblx0XHR0aGlzLnJlZnJlc2goKTtcblx0fVxuXG5cdHByaXZhdGUgcmVmcmVzaCgpe1xuXHRcdHRoaXMuY29tcG9uZW50LmNvbnRyb2wucmVmcmVzaCgpO1xuXHR9XG5cblx0cHJpdmF0ZSB6b29tSW4oKXtcblx0XHRjb25zdCBzY2FsZVggPSB0aGlzLmNoYXJ0LnNjYWxlc1sgQVhJU19YIF07XG5cblx0XHRpZiggIXRoaXMuZHJhZy52YWx1ZS5lbmQgKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBzeCA9IHRoaXMuZHJhZy52YWx1ZS5zdGFydC5vZmZzZXRYO1xuXHRcdGNvbnN0IGV4ID0gdGhpcy5kcmFnLnZhbHVlLmVuZC5vZmZzZXRYO1xuXG5cdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1pbiggc3gsIGV4ICk7XG5cdFx0Y29uc3QgZW5kID0gTWF0aC5tYXgoIHN4LCBleCApO1xuXG5cdFx0Y29uc3Qgb3MgPSBNYXRoLm1heCggc3RhcnQsIHNjYWxlWC5sZWZ0ICk7XG5cdFx0Y29uc3Qgb2UgPSBNYXRoLm1heCggc2NhbGVYLmxlZnQsXHRNYXRoLm1pbiggZW5kLCBzY2FsZVgucmlnaHQgKSk7XG5cblx0XHRpZiggTWF0aC5hYnMoIG9zIC0gb2UgKSA9PSAwICl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZnJvbSA9IHNjYWxlWC5nZXRWYWx1ZUZvclBpeGVsKCBvcyApO1xuXHRcdGNvbnN0IHRvID0gc2NhbGVYLmdldFZhbHVlRm9yUGl4ZWwoIG9lICk7XG5cblx0XHRjb25zdCBtaW5zRGlmZiA9IE1hdGguYWJzKCBmcm9tLmRpZmYoIHRvLCBcIm1pbnV0ZXNcIiApICk7XG5cblx0XHRpZiggbWluc0RpZmYgPj0gMSApe1xuXHRcdFx0dGhpcy50aW1lLnpvb20oIHsgZnJvbSwgdG99IClcblx0XHR9XG5cdH1cbn1cbiJdfQ==
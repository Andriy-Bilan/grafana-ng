import { Inject, Injectable } from '@angular/core';
import { PANEL_TOKEN } from 'common';
import { BehaviorSubject } from 'rxjs';
import { AXIS_X } from '../chart.m';
import * as i0 from "@angular/core";
import * as i1 from "common";
export class MouseStore {
    constructor(panel, time) {
        this.panel = panel;
        this.time = time;
        this._down = new BehaviorSubject(null);
        this.down$ = this._down.asObservable();
        this._up = new BehaviorSubject(null);
        this.up$ = this._up.asObservable();
        this.drag = new BehaviorSubject(null);
        this.drag$ = this.drag.asObservable();
        this.hover = new BehaviorSubject(null);
        this.hover$ = this.hover.asObservable();
    }
    get component() {
        var _a;
        return (_a = this
            .panel
            .widget) === null || _a === void 0 ? void 0 : _a.component;
    }
    get chart() {
        return this
            .component
            .control
            .chart;
    }
    down(s) {
        this.drag.next({
            start: s,
            end: undefined
        });
        this._down.next(s);
        s.target.setPointerCapture(1);
    }
    up(e) {
        e.target.releasePointerCapture(1);
        this._up.next(e);
        this.zoomIn();
        this.drag.next(undefined);
        this.refresh();
    }
    move(m) {
        this.hover.next(m);
        const d = this.drag.value;
        if (!d) {
            return;
        }
        this.drag.next({
            start: d.start,
            end: m
        });
    }
    leave(e) {
        this.hover.next(undefined);
        this.refresh();
    }
    refresh() {
        this.component.control.refresh();
    }
    zoomIn() {
        const scaleX = this.chart.scales[AXIS_X];
        if (!this.drag.value.end) {
            return;
        }
        const sx = this.drag.value.start.offsetX;
        const ex = this.drag.value.end.offsetX;
        const start = Math.min(sx, ex);
        const end = Math.max(sx, ex);
        const os = Math.max(start, scaleX.left);
        const oe = Math.max(scaleX.left, Math.min(end, scaleX.right));
        if (Math.abs(os - oe) == 0) {
            return;
        }
        const from = scaleX.getValueForPixel(os);
        const to = scaleX.getValueForPixel(oe);
        const minsDiff = Math.abs(from.diff(to, "minutes"));
        if (minsDiff >= 1) {
            this.time.zoom({ from, to });
        }
    }
}
MouseStore.ɵfac = function MouseStore_Factory(t) { return new (t || MouseStore)(i0.ɵɵinject(PANEL_TOKEN), i0.ɵɵinject(i1.TimeRangeStore)); };
MouseStore.ɵprov = i0.ɵɵdefineInjectable({ token: MouseStore, factory: MouseStore.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(MouseStore, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PANEL_TOKEN]
            }] }, { type: i1.TimeRangeStore }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW91c2Uuc3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9hcHAvcGx1Z2lucy93aWRnZXRzL2NoYXJ0L3NyYy9iYXNlL21vdXNlLnN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBUyxXQUFXLEVBQWtCLE1BQU0sUUFBUSxDQUFDO0FBQzVELE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQzs7O0FBUXBDLE1BQU0sT0FBTyxVQUFVO0lBNEJ0QixZQUMrQixLQUFZLEVBQ2xDLElBQW9CO1FBREUsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUNsQyxTQUFJLEdBQUosSUFBSSxDQUFnQjtRQTVCckIsVUFBSyxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RCxVQUFLLEdBQTJCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFM0QsUUFBRyxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RCxRQUFHLEdBQTJCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdkQsU0FBSSxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3RCxVQUFLLEdBQTJCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFMUQsVUFBSyxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RCxXQUFNLEdBQTJCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFvQnBFLENBQUM7SUFsQkQsSUFBSSxTQUFTOztRQUNaLGFBQU8sSUFBSTthQUNULEtBQUs7YUFDTCxNQUFNLDBDQUNM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TUFBTSxDQUFDLGdCQUFnQixDQUFFLEVBQUUsQ0FBRSxDQUFDO1FBRXpDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxFQUFFLEVBQUUsU0FBUyxDQUFFLENBQUUsQ0FBQztRQUV4RCxJQUFJLFFBQVEsSUFBSSxDQUFDLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDLENBQUUsQ0FBQTtTQUM3QjtJQUNGLENBQUM7O29FQTlHVyxVQUFVLGNBNkJaLFdBQVc7a0RBN0JULFVBQVUsV0FBVixVQUFVO2tEQUFWLFVBQVU7Y0FEdEIsVUFBVTs7c0JBOEJSLE1BQU07dUJBQUUsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFuZWwsIFBBTkVMX1RPS0VOLCBUaW1lUmFuZ2VTdG9yZSB9IGZyb20gJ2NvbW1vbic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFYSVNfWCB9IGZyb20gJy4uL2NoYXJ0Lm0nO1xuXG5leHBvcnQgaW50ZXJmYWNlIERyYWdSZWdpb257XG5cdHN0YXJ0OiBNb3VzZUV2ZW50O1xuXHRlbmQ6IE1vdXNlRXZlbnQ7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb3VzZVN0b3JlIHtcblxuXHRwcml2YXRlIF9kb3duOiBCZWhhdmlvclN1YmplY3Q8TW91c2VFdmVudD4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpO1xuXHRyZWFkb25seSBkb3duJDogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PiA9IHRoaXMuX2Rvd24uYXNPYnNlcnZhYmxlKCk7XG5cblx0cHJpdmF0ZSBfdXA6IEJlaGF2aW9yU3ViamVjdDxNb3VzZUV2ZW50PiA9IG5ldyBCZWhhdmlvclN1YmplY3QobnVsbCk7XG5cdHJlYWRvbmx5IHVwJDogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PiA9IHRoaXMuX3VwLmFzT2JzZXJ2YWJsZSgpO1xuXG5cdHByaXZhdGUgZHJhZzogQmVoYXZpb3JTdWJqZWN0PERyYWdSZWdpb24+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcblx0cmVhZG9ubHkgZHJhZyQ6IE9ic2VydmFibGU8RHJhZ1JlZ2lvbj4gPSB0aGlzLmRyYWcuYXNPYnNlcnZhYmxlKCk7XG5cblx0cHJpdmF0ZSBob3ZlcjogQmVoYXZpb3JTdWJqZWN0PE1vdXNlRXZlbnQ+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcblx0cmVhZG9ubHkgaG92ZXIkOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdGhpcy5ob3Zlci5hc09ic2VydmFibGUoKTtcblxuXHRnZXQgY29tcG9uZW50KCl7XG5cdFx0cmV0dXJuIHRoaXNcblx0XHRcdC5wYW5lbFxuXHRcdFx0LndpZGdldFxuXHRcdFx0Py5jb21wb25lbnQ7XG5cdH1cblxuXHRnZXQgY2hhcnQoKXtcblx0XHRyZXR1cm4gdGhpc1xuXHRcdFx0LmNvbXBvbmVudFxuXHRcdFx0LmNvbnRyb2xcblx0XHRcdC5jaGFydDtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKCBcblx0XHRASW5qZWN0KCBQQU5FTF9UT0tFTiApIHB1YmxpYyBwYW5lbDogUGFuZWwsXG5cdFx0cHJpdmF0ZSB0aW1lOiBUaW1lUmFuZ2VTdG9yZSApe1xuXHRcdFxuXHR9XG5cblx0ZG93biggczogTW91c2VFdmVudCApICB7XG5cdFx0dGhpcy5kcmFnLm5leHQoIHtcblx0XHRcdHN0YXJ0OiBzLFxuXHRcdFx0ZW5kOiB1bmRlZmluZWRcblx0XHR9ICk7XG5cblx0XHR0aGlzLl9kb3duLm5leHQoIHMgKTtcblxuXHRcdCg8YW55PnMudGFyZ2V0KS5zZXRQb2ludGVyQ2FwdHVyZSggMSApO1xuXHR9XG5cblx0dXAoIGU6IE1vdXNlRXZlbnQgKXtcblx0XHQoPGFueT5lLnRhcmdldCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKCAxICk7XG5cblx0XHR0aGlzLl91cC5uZXh0KCBlICk7XG5cblx0XHR0aGlzLnpvb21JbigpO1xuXG5cdFx0dGhpcy5kcmFnLm5leHQoIHVuZGVmaW5lZCApO1xuXG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cdH1cblxuXHRtb3ZlKCBtOiBNb3VzZUV2ZW50ICl7XG5cdFx0dGhpcy5ob3Zlci5uZXh0KCBtICk7XG5cblx0XHRjb25zdCBkID0gdGhpcy5kcmFnLnZhbHVlO1xuXG5cdFx0aWYoICFkICl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5kcmFnLm5leHQoIHtcblx0XHRcdHN0YXJ0OiBkLnN0YXJ0LFxuXHRcdFx0ZW5kOiBtXG5cdFx0fSApXG5cdH1cblxuXHRsZWF2ZSggZTogTW91c2VFdmVudCApe1xuXHRcdHRoaXMuaG92ZXIubmV4dCggdW5kZWZpbmVkICk7XG5cblx0XHR0aGlzLnJlZnJlc2goKTtcblx0fVxuXG5cdHByaXZhdGUgcmVmcmVzaCgpe1xuXHRcdHRoaXMuY29tcG9uZW50LmNvbnRyb2wucmVmcmVzaCgpO1xuXHR9XG5cblx0cHJpdmF0ZSB6b29tSW4oKXtcblx0XHRjb25zdCBzY2FsZVggPSB0aGlzLmNoYXJ0LnNjYWxlc1sgQVhJU19YIF07XG5cblx0XHRpZiggIXRoaXMuZHJhZy52YWx1ZS5lbmQgKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBzeCA9IHRoaXMuZHJhZy52YWx1ZS5zdGFydC5vZmZzZXRYO1xuXHRcdGNvbnN0IGV4ID0gdGhpcy5kcmFnLnZhbHVlLmVuZC5vZmZzZXRYO1xuXG5cdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1pbiggc3gsIGV4ICk7XG5cdFx0Y29uc3QgZW5kID0gTWF0aC5tYXgoIHN4LCBleCApO1xuXG5cdFx0Y29uc3Qgb3MgPSBNYXRoLm1heCggc3RhcnQsIHNjYWxlWC5sZWZ0ICk7XG5cdFx0Y29uc3Qgb2UgPSBNYXRoLm1heCggc2NhbGVYLmxlZnQsXHRNYXRoLm1pbiggZW5kLCBzY2FsZVgucmlnaHQgKSk7XG5cblx0XHRpZiggTWF0aC5hYnMoIG9zIC0gb2UgKSA9PSAwICl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZnJvbSA9IHNjYWxlWC5nZXRWYWx1ZUZvclBpeGVsKCBvcyApO1xuXHRcdGNvbnN0IHRvID0gc2NhbGVYLmdldFZhbHVlRm9yUGl4ZWwoIG9lICk7XG5cblx0XHRjb25zdCBtaW5zRGlmZiA9IE1hdGguYWJzKCBmcm9tLmRpZmYoIHRvLCBcIm1pbnV0ZXNcIiApICk7XG5cblx0XHRpZiggbWluc0RpZmYgPj0gMSApe1xuXHRcdFx0dGhpcy50aW1lLnpvb20oIHsgZnJvbSwgdG99IClcblx0XHR9XG5cdH1cbn1cbiJdfQ==
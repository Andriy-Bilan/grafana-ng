{"version":3,"sources":["../../../../app/plugins/datasources/influx/src/settings/settings.html","../../../../app/plugins/datasources/influx/src/settings/settings.ts","../../../../app/plugins/datasources/influx/src/query/query.m.ts","../../../../app/plugins/datasources/influx/src/query/compiler.ts","../../../../app/plugins/datasources/influx/src/influx.mod.ts"],"names":["i0.ɵɵtext","i0.ɵɵtemplate","InfluxSettingsEditorComponent","this","form","FormGroup","url","FormControl","Validators","required","whitelistedCookies","basicAuthentication","withCredentials","tlsClientAuth","withCaCert","skipTlsVerification","database","user","password","minTimeInterval","Object","defineProperty","prototype","get","selectors","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵelementEnd","i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵadvance","AggrFunc","AggrFuncGroup","measurement","policy","refId","fields","Array","GroupByOption","GroupByTimeOptions","GroupByFillOptions","OrderByTime","AggrFuncHelper","getGroup","f","Count","Distinct","Integral","Mean","Median","Mode","Sum","Aggregations","Bottom","First","Last","Max","Min","Percentile","Top","Selectors","Derivative","Spread","NonNegativeDerivative","Difference","NonNegativeDifference","MovingAverage","CumulativeSum","Stddev","Elapsed","Transformations","HoltWinters","HoltWintersWithFit","Predictors","Math","Alias","MetricVars","TIME_FILTER","TIME_INTERVAL","InfluxQueryCompiler","time","compile","query","range","_this","array","targets","forEach","t","gen","Compiler","invalid","virgin","push","text","request","join","of","i0","ɵɵdirectiveInject","i1$1","TimeRangeStore","encapsulation","target","length","getFieldsText","getMeasurementText","result","x","getFieldText","field","key","aggr","functions","find","name","param","value","filter","p","math","alias","meas","root","cond","tagIndex","tags","condition","operator","timeFilter","getTimeFilter","groupBy","groupByTime","type","Time","groupByFill","Fill","groupByTag","Tag","gb","getOptimalAutoGroupBy","params","e","index","order","Asc","limit","slimit","TimeRangeParser","toDateTime","from","to","diff","tz","converter","timezone","getInfluxTime","fromIsAbsolute","date","roundUp","_.isString","parts","exec","parseInt","valueOf","InfluxModule","imports","CommonModule","FormsModule","ReactiveFormsModule","EdCommonModule","EdUilibModule","declarations","exports"],"mappings":"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","sourcesContent":["<div [formGroup]=\"form\">\r\n\r\n\t<h3 class=\"page-heading\">HTTP</h3>\t\r\n\t<div class=\"gf-form-group\">\r\n\t\t<ed-textbox\r\n\t\t\tlabel=\"URL\"\r\n\t\t\tlabelWidth=\"10\"\r\n\t\t\ttooltip=\"Specify a complete HTTP URL (for example http://your_server:8080)\"\r\n\t\t\tformControlName=\"url\"\t>\r\n\t\t\t<ng-template edValidationTemplate *ngIf=\"url.hasError( 'required' ) && url.touched\">\r\n\t\t\t\tplease enter url\r\n\t\t\t</ng-template>\r\n\t\t</ed-textbox>\r\n\r\n\t\t<ed-textbox\r\n\t\t\tlabel=\"Whitelisted Cookies\"\r\n\t\t\tlabelWidth=\"10\"\r\n\t\t\tformControlName=\"whitelistedCookies\"\t>\r\n\t\t</ed-textbox>\r\n\r\n\t</div>\r\n\r\n\t<h3 class=\"page-heading\">Auth</h3>\r\n\t<div class=\"gf-form-group\">\r\n\t\t<div class=\"gf-form-inline\">\r\n\t\t\t<ed-checkbox \r\n\t\t\t\tlabelWidth=\"10\"\r\n\t\t\t\tlabel=\"Basic Auth\"\r\n\t\t\t\tformControlName=\"basicAuthentication\">\r\n\t\t\t</ed-checkbox>\r\n\r\n\t\t\t<ed-checkbox \r\n\t\t\t\tlabelWidth=\"10\"\r\n\t\t\t\tlabel=\"With Credentials\"\r\n\t\t\t\ttooltip=\"Whether credentials such as cookies or auth headers should be sent with cross-site requests.\"\r\n\t\t\t\tformControlName=\"withCredentials\">\r\n\t\t\t</ed-checkbox>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"gf-form-inline\">\r\n\t\t\t<ed-checkbox \r\n\t\t\t\tlabelWidth=\"10\"\r\n\t\t\t\tlabel=\"TLS Client Auth\"\r\n\t\t\t\tformControlName=\"tlsClientAuth\">\r\n\t\t\t</ed-checkbox>\r\n\r\n\t\t\t<ed-checkbox \r\n\t\t\t\tlabelWidth=\"10\"\r\n\t\t\t\tlabel=\"With CA Cert\"\r\n\t\t\t\ttooltip=\"Needed for verifing self-signed TLS Certs\"\r\n\t\t\t\tformControlName=\"withCaCert\">\r\n\t\t\t</ed-checkbox>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"gf-form-inline\">\r\n\t\t\t<ed-checkbox \r\n\t\t\t\tlabelWidth=\"10\"\r\n\t\t\t\tlabel=\"Skip TLS Verify\"\r\n\t\t\t\tformControlName=\"skipTlsVerification\">\r\n\t\t\t</ed-checkbox>\r\n\t\t</div>\r\n\t\t\r\n\t</div>\r\n\r\n\t<h3 class=\"page-heading\">InfluxDB Details</h3>\r\n\r\n\t<div class=\"gf-form-group\">\r\n\t\t<ed-textbox \r\n\t\t\t[label]=\"'Database'\"\r\n\t\t\t[labelWidth]=\"10\"\r\n\t\t\tformControlName=\"database\">\r\n\t\t</ed-textbox>\r\n\r\n\t\t<div class=\"gf-form-inline\">\r\n\t\t\t<ed-textbox \r\n\t\t\t\t[label]=\"'User'\"\r\n\t\t\t\t[labelWidth]=\"10\"\r\n\t\t\t\t[width]=\"5\"\r\n\t\t\t\tformControlName=\"user\">\r\n\t\t\t</ed-textbox>\r\n\r\n\t\t\t<ed-textbox \r\n\t\t\t\t[label]=\"'Password'\"\r\n\t\t\t\t[labelWidth]=\"10\"\r\n\t\t\t\t[width]=\"5\"\r\n\t\t\t\ttype=\"password\"\r\n\t\t\t\tformControlName=\"password\">\r\n\t\t\t</ed-textbox>\r\n\t\t</div>\r\n\t\r\n\t</div>\r\n\r\n\t<div class=\"gf-form-group\">\r\n\t\t<ed-info-box>\r\n\t\t\t<h5>Database Access</h5>\r\n\t\t\t<p>\r\n\t\t\t\tSetting the database for this datasource does not deny access to other databases.  The InfluxDB query syntax allows\r\n\t\t\t\tswitching the database in the query.  For example:\r\n\t\t\t\t<code>SHOW MEASUREMENTS ON _internal</code> or <code>SELECT * FROM \"_internal\"..\"database\" LIMIT 10</code>\r\n\t\t\t\t<br/><br/>\r\n\t\t\t\tTo support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\r\n\t\t\t</p>\r\n\t\t</ed-info-box>\r\n\t</div>\r\n\r\n\t<div class=\"gf-form-group\">\r\n\t\t<ed-textbox \r\n\t\t\t[label]=\"'Min time interval'\"\r\n\t\t\t[labelWidth]=\"11\"\r\n\t\t\t[width]=\"5\"\r\n\t\t\t[placeholder]=\"'10s'\"\r\n\t\t\t[tooltip]=\"'A lower limit for the auto group by time interval. Recommended to be set to write frequency,\r\n\t\t\t\tfor example 1m if your data is written every minute.'\"\r\n\t\t\ttype=\"password\"\r\n\t\t\tformControlName=\"minTimeInterval\">\r\n\t\t</ed-textbox>\r\n\t</div>\r\n\r\n\t\r\n</div>","import { Component } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { IDataSourceSettingsEditor } from 'common';\r\n\r\n@Component({\r\n  selector: 'ds-settings-editor',\r\n  templateUrl: './settings.html'\r\n})\r\nexport class InfluxSettingsEditorComponent implements IDataSourceSettingsEditor {\r\n\tform: FormGroup;\r\n\r\n\tget url(){\r\n\t\treturn this.form.get('url');\r\n\t}\r\n\t\r\n\tconstructor(){\r\n\t\tthis.form = new FormGroup({\r\n\t\t\t'url': new FormControl( null, Validators.required ),\r\n\t\t\t'whitelistedCookies': new FormControl( null ),\r\n\r\n\t\t\t'basicAuthentication': new FormControl( false ),\r\n\t\t\t'withCredentials': new FormControl( false ),\r\n\t\t\t'tlsClientAuth': new FormControl( false ),\r\n\t\t\t'withCaCert': new FormControl( false ),\r\n\t\t\t'skipTlsVerification': new FormControl( false ),\r\n\t\t\t\r\n\t\t\t'database': new FormControl( null, Validators.required ),\r\n\t\t\t'user': new FormControl( null ),\r\n\t\t\t'password': new FormControl( null ),\r\n\t\t\t'minTimeInterval': new FormControl( null )\r\n\t\t});\r\n\t}\r\n}","export class InfluxQuery {\n  measurement: string = '';\n  policy: string = '';\n  refId: string = '';\n  // tags = new Array<Tag>();\n\tfields = new Array<Field>();\n\t\n\t// limit: number = undefined;\n\t// slimit: number = undefined;\n\n\t// order = OrderByTime.Asc;\n\t// alias: string =  '';\n\n\t// groupBy = new Array<GroupByObject>();\n\n  // virgin: boolean = false;\n}\n\nexport interface Field {\n  key: string;\n  functions: FuncObject[];\n}\n\nexport interface FuncObject {\n  name: string;\n  param: any;\n}\n\nexport enum AggrFunc {\n  Count = 'count',\n  Distinct = 'distinct',\n  Integral = 'integral',\n  Mean = 'mean',\n  Median = 'median',\n  Mode = 'mode',\n  Sum = 'sum',\n\n  Bottom = 'bottom',\n  First = 'first',\n  Last = 'last',\n  Max = 'max',\n  Min = 'min',\n  Percentile = 'percentile',\n  Top = 'top',\n\n  Derivative = 'derivative',\n  Spread = 'spread',\n  NonNegativeDerivative = 'non_negative_derivative',\n  Difference = 'difference',\n  NonNegativeDifference = 'non_negative_difference',\n  MovingAverage = 'moving_average',\n  CumulativeSum = 'cumulative_sum',\n  Stddev = 'stddev',\n  Elapsed = 'elapsed',\n\n  HoltWinters = 'holt_winters',\n  HoltWintersWithFit = 'holt_winters_with_fit',\n\n  Math = 'math',\n  Alias = 'alias',\n}\n\nexport enum AggrFuncGroup {\n  Aggregations,\n  Selectors,\n  Transformations,\n  Predictors,\n  Math,\n  Alias\n}\n\n\nexport class AggrFuncHelper {\n  static getGroup(f: AggrFunc|string) {\n    switch (f) {\n      case AggrFunc.Count:\n      case AggrFunc.Distinct:\n      case AggrFunc.Integral:\n      case AggrFunc.Mean:\n      case AggrFunc.Median:\n      case AggrFunc.Mode:\n      case AggrFunc.Sum:\n        return AggrFuncGroup.Aggregations;\n\n      case AggrFunc.Bottom:\n      case AggrFunc.First:\n      case AggrFunc.Last:\n      case AggrFunc.Max:\n      case AggrFunc.Min:\n      case AggrFunc.Percentile:\n      case AggrFunc.Top:\n        return AggrFuncGroup.Selectors;\n\n      case AggrFunc.Derivative:\n      case AggrFunc.Spread:\n      case AggrFunc.NonNegativeDerivative:\n      case AggrFunc.Difference:\n      case AggrFunc.NonNegativeDifference:\n      case AggrFunc.MovingAverage:\n      case AggrFunc.CumulativeSum:\n      case AggrFunc.Stddev:\n      case AggrFunc.Elapsed:\n        return AggrFuncGroup.Transformations;\n\n      case AggrFunc.HoltWinters:\n      case AggrFunc.HoltWintersWithFit:\n        return AggrFuncGroup.Predictors;\n\n      case AggrFunc.Math:\n        return AggrFuncGroup.Math;\n\n      case AggrFunc.Alias:\n        return AggrFuncGroup.Alias;\n\n    }\n  }\n}\n\nexport enum GroupByOption{\n\tTime,\n\tFill,\n\tTag\n}\n\nexport enum GroupByTimeOptions{\n  Dynamic = '$__interval',\n  S1 = '1s',\n  S10 = '10s',\n  M1 = '1m',\n  M5 = '5m',\n  M10 = '10m',\n  M15 = '15m',\n  H1 = '1h',\n}\n\nexport enum GroupByFillOptions{\n\tNone = 'none',\n\tNull = 'null',\n\tZero = '0',\n\tPrev = 'previous',\n\tLinear = 'linear'\n}\n\nexport enum OrderByTime{\n\tAsc,\n\tDesc\n}\n\nexport class MetricVars{\n\tstatic readonly TIME_FILTER = \"$timeFilter\";\n\tstatic readonly TIME_INTERVAL = \"$__interval\";\n}\n\n","import { Component } from '@angular/core';\nimport { TimeRange, TimeRangeParser, TimeRangeStore, Timezone, QueryCompiler } from 'common';\nimport { AggrFuncGroup, AggrFuncHelper,\n\tField, OrderByTime, GroupByOption, MetricVars } from './query.m';\nimport * as _ from 'lodash';\nimport { Observable, of } from 'rxjs';\n\n@Component({\n\tselector: 'query-compiler',\n\ttemplate: ''\n})\nexport class InfluxQueryCompiler implements QueryCompiler {\n\n\tconstructor( private time: TimeRangeStore ){\n\t\t\n\t}\n\n\n\tcompile( query: any, range?: TimeRange ) : Observable<string> {\n\t\t//console.log( query );\n\n\t\tconst array = [];\n\n\t\tquery\n\t\t\t.targets\n\t\t\t.forEach(t => {\n\t\t\t\t// const modifiedRange = this\n\t\t\t\t// \t.timeManager\n\t\t\t\t// \t.getModifiedRange( this.widget.time )\n\n\t\t\t\tconst gen = new Compiler( this.time, t, range );\n\n\t\t\t\tif (!gen.invalid && !t.virgin) {\n\t\t\t\t\tarray.push(gen.text);\n\t\t\t\t}\n\t\t\t});\n\n\t\tlet request = array.join(';');\n\n\t\treturn of( request );\n\t}\n}\n\nclass Compiler{\n\tget invalid(){\n    const invalidQuery = \n      (!this.target) ||\n      (!this.target.fields || 0 === this.target.fields.length );\n\n    return invalidQuery;\n\t}\n\t\n\tget text() {\n    return `SELECT ${this.getFieldsText()} FROM ${this.getMeasurementText()}`\n  }\n\n\tconstructor( \n\t\tprivate time: TimeRangeStore,\n\t\tprivate target: any,\n\t\tprivate range?: TimeRange ){\n\n\t}\n\n\tgetFieldsText() {\n\t\tlet result = '';\n\t\t\n    if (!this.target.fields) {\n      return result;\n    }\n\n    this.target.fields.forEach(x => {\n      if (result.length > 0) {\n        result += ', ';\n      }\n\n      result += this.getFieldText( x );\n    })\n\n    return result;\n\t}\n\t\n\t\n  getFieldText(field: Field) {\n\t\t let result = '';\n    let key = (!field.key) ? 'field' : field.key;\n\n    const aggr = field.functions.find(x =>\n      AggrFuncHelper.getGroup(x.name) == AggrFuncGroup.Aggregations ||\n      AggrFuncHelper.getGroup(x.name) == AggrFuncGroup.Selectors);\n\n    if (aggr) {\n      result += aggr.name + ((aggr.param && aggr.param.value) ?\n        `(\"${key}\", ${aggr.param.value})` : `(\"${key}\")`);\n    } else {\n      result = `\"${key}\"`;\n    }\n\n    const trans = field.functions.filter(x =>\n      AggrFuncHelper.getGroup(x.name) === AggrFuncGroup.Transformations);\n\n    trans.forEach(x => {\n      const p = (x.param && x.param.value) ? `, ${x.param.value}` : ``;\n      result = `${x.name}(${result}${p})`;\n    })\n\n    const math = field.functions.find(x =>\n      AggrFuncHelper.getGroup(x.name) === AggrFuncGroup.Math);\n\n    if (math) {\n      result = `${result} ${math.param.value}`;\n    }\n\n    const alias = field.functions.find(x =>\n      AggrFuncHelper.getGroup(x.name) === AggrFuncGroup.Alias);\n\n    if (alias) {\n      result = `${result} AS \"${alias.param.value}\"`;\n    }\n\n\t\treturn result;\n\t}\n\t\n  getMeasurementText() {\n    const meas = (!this.target.measurement) ? 'measurement' : this.target.measurement;\n\n    let rp = (this.target.policy && this.target.policy.length > 0 && this.target.policy !== 'default') ?\n      `\"${this.target.policy}\".` : '';\n\n    let root = `${rp}\"${meas}\"`;\n    let cond = '';\n\n    let tagIndex = 0;\n\n    if (this.target.tags) {\n      this\n        .target\n        .tags\n        .filter(x => x.key && x.value)\n        .forEach(x => {\n          if (tagIndex > 0) {\n            cond += ` ${x.condition} `;\n          }\n\n          cond += ` \"${x.key}\" ${x.operator} '${x.value}'`;\n          ++tagIndex;\n        });\n    }\n\n    const timeFilter = ( this.range ) ?\n      this.getTimeFilter() : MetricVars.TIME_FILTER;\n\n    if (cond.length > 0) {\n      root = `${root} WHERE (${cond}) and ${timeFilter}`\n    }\n    else{\n      // TODO\n      root = `${root} WHERE ${timeFilter}`\n\t\t}\n\n\t\tconst groupBy = this.target.groupBy;\n\t\tconst groupByTime = groupBy.find( x => x.type == GroupByOption.Time );\n\t\tconst groupByFill = groupBy.find( x => x.type == GroupByOption.Fill );\n\t\tconst groupByTag = groupBy.filter( x => x.type == GroupByOption.Tag );\n\n\t\tif( groupByTime ){\n      const gb = ( this.range ) ? this.getOptimalAutoGroupBy() : groupByTime.params[ 0 ];\n\t\t\troot = `${root} GROUP BY time(${gb})`\n\t\t}\n\n\t\tif( groupByTag.length > 0 ){\n\t\t\troot = ( !groupByTime ) ? `${root} GROUP BY` : `${root},`; \n\n\t\t\tgroupByTag.forEach( (e,index) => {\n\t\t\t\troot = `${root}${index >0 ? ', ' : ' '} \"${e.params[ 0 ]}\"`\n\t\t\t} )\n\t\t}\n\t\t\n\t\tif( groupByFill ){\n\t\t\troot = `${root} FILL(${groupByFill.params[ 0 ]})`\n\t\t}\n\n\t\tif( this.target.order != OrderByTime.Asc ){\n\t\t\troot = `${root} ORDER BY time DESC`; \n\t\t}\n\t\t\n\t\tif( this.target.limit > 0 ){\n\t\t\troot = `${root} LIMIT ${this.target.limit}`;\n\t\t}\n\n\t\tif( this.target.slimit > 0 ){\n\t\t\troot = `${root} SLIMIT ${this.target.slimit}`;\n\t\t}\n\n    return root;\n\t}\n\t\n  getOptimalAutoGroupBy() : string {\n    const f = TimeRangeParser.toDateTime( this.range.from, false );\n    const t = TimeRangeParser.toDateTime( this.range.to, true );\n\n\t\tif (5 > +t.diff( f, \"minutes\" ))\n\t\t\treturn \"200ms\";\n\n\t\tif (15 > +t.diff( f, \"minutes\" ))\n\t\t\treturn \"1s\";\n\n\t\tif (30 > t.diff( f, \"minutes\" ))\n\t\t\treturn \"2s\";\n\n\t\tif (1 > t.diff( f, \"hours\" ))\n\t\t\treturn \"5s\";\t\t\n\n\t\tif (3 > t.diff( f, \"hours\" ))\n\t\t\treturn \"10s\";\t\t\n\n\t\tif (6 > t.diff( f, \"hours\" ))\n\t\t\treturn \"20s\";\t\t\n\n\t\tif (12 > t.diff( f, \"hours\" ))\n\t\t\treturn \"1m\";\t\t\n\n\t\tif (24 > t.diff( f, \"hours\" ))\n\t\t\treturn \"2m\";\t\t\n\n\t\tif (7 > t.diff( f, \"days\" ))\n\t\t\treturn \"10m\";\t\t\n\n\t\tif (31 > t.diff( f, \"days\" ))\n\t\t\treturn \"1h\";\t\t\n\n\t\tif (365 > t.diff( f, \"days\" ))\n\t\t\treturn \"12h\";\t\t\n\n\t\t return \"24h\";\n\t}\n\n  getTimeFilter() {\n    const range = this.range;\n    const tz = this.time.converter.timezone; //this.range.timezone;\n\n    let from = this.getInfluxTime( range.from, false, tz);\n    let to = this.getInfluxTime( range.to, true, tz);\n\n    const fromIsAbsolute = from[from.length - 1] === 'ms';\n\n    if (to === 'now()' && !fromIsAbsolute) {\n      return 'time >= ' + from;\n    }\n\n    return 'time >= ' + from + ' and time <= ' + to;\n\t}\n\t\n  getInfluxTime(date: any, roundUp: any, timezone: Timezone) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n\n      date = TimeRangeParser.toDateTime(date, roundUp, timezone);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}","import { NgModule } from '@angular/core';\nimport { InfluxSettingsEditorComponent } from './settings/settings';\nimport { InfluxQueryCompiler } from './query/compiler';\n\nimport { EdCommonModule } from 'common';\nimport { EdUilibModule } from 'uilib';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    InfluxSettingsEditorComponent,\n    InfluxQueryCompiler\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    EdCommonModule,\n    EdUilibModule\n  ],\n  exports: [\n    InfluxSettingsEditorComponent,\n    InfluxQueryCompiler,\n  ]\n})\nexport class InfluxModule { }\n"]}